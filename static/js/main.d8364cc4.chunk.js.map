{"version":3,"sources":["AppFiles/AppContext.js","Scroolbar/AppScroolbar.js","utilities/Constans.js","utilities/FetchFunctions.js","images/no_image.png","AppFiles/StartPageCard.js","AppFiles/StartPageSearch.js","AppFiles/StartPage.js","images/tmdb.svg","Scroolbar/MovieSearchScroolbar.js","AppFiles/MovieSearch.js","AppFiles/MovieCard.js","AppFiles/Movie.js","images/BgGreen2.jpg","App.js","testingFiles/serviceWorker.js","index.js"],"names":["AppContext","createContext","AppScroolbar","props","className","onYReachStart","console","log","children","API_KEY","BASE_API_URL","BASE_IMG_URL","POSTER_W500","NOT_FOUND_POSTER_W500","POPULAR_MOVIES_URL","getMoviesDataToDisplayInSearch","input","a","getAllMoviesData","allMoviesData","error","map","movie","original_title","id","poster_path","url","axios","get","response","data","results","getMovieData","movieID","FullscreenSearch","useContext","searchbarText","suggestions","setSliceNumber","setMovieID","item","index","to","onClick","src","no_image","alt","StartPageSearch","oldSearchbarText","handleChange","handleClickOnInput","useState","changeStyle","setChangeStyle","useScrollPosition","prevPos","currPos","y","onSubmit","e","preventDefault","onChange","type","placeholder","value","StartPage","div","initial","opacity","animate","exit","transition","duration","Example","this","setState","onXReachEnd","show","text","Component","MovieSearch","cursor","setCursor","setShow","node","suggestionsSelected","setSearchbarText","setOldSearchbarText","queryData","setSuggestions","setQueryData","sliceNumber","fetchPopularMoviesOnStartPage","ArrowKeysReact","config","up","isNaN","prevState","down","history","useHistory","showMore","push","getHighlightedText","highlight","parts","split","RegExp","part","i","style","toLowerCase","color","fontWeight","onMouseEnterHandle","parseInt","target","getAttribute","TMDBLogo","ref","onKeyPress","keyCode","which","length","onMouseEnter","visibility","nestedDataToString","nestedData","nestedArray","undefined","forEach","name","join","Card","movieData","setBackgroundIMG","overview","tagline","production_companies","genres","backdrop_path","release_date","runtime","revenue","vote_average","posterIMG","productionList","genresList","backdropIMG","toLocaleString","useEffect","exitBeforeEnter","Movie","useRef","document","addEventListener","handleClick","removeEventListener","current","contains","App","location","useLocation","pathname","backgroundIMG","substring","lastIndexOf","setMovieData","showResInSearchBar","dataToDisplay","movies","slice","events","tabIndex","Provider","replace","exact","path","render","img","BgGreen2","Boolean","window","hostname","match","ReactDOM","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d8364cc4.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nexport const AppContext = createContext(null)","import ScrollBar from 'react-perfect-scrollbar'\r\nimport './ScroolbarStyle.scss'\r\n\r\nexport default function AppScroolbar (props) {\r\n  return (\r\n    <ScrollBar \r\n      className={'AppScroolbar'}\r\n      onYReachStart={() => console.log('helo')}\r\n    >\r\n      {props.children}\r\n    </ScrollBar>\r\n  )\r\n}","export const API_KEY = 'api_key=cfe422613b250f702980a3bbf9e90716'\r\nexport const BASE_API_URL = 'https://api.themoviedb.org'\r\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/'\r\nexport const INIT_BG_IMG = 'https://image.tmdb.org/t/p/original/rAiYTfKGqDCRIIqo664sY9XZIvQ.jpg' // interstellar\r\n\r\nexport const POSTER_W500 = `${BASE_IMG_URL}w500`\r\nexport const NOT_FOUND_POSTER_W500 = `${POSTER_W500}null`\r\n\r\n\r\nexport const POPULAR_MOVIES_URL = `${BASE_API_URL}/3/movie/popular?${API_KEY}` ","import axios from 'axios'\r\nimport { API_KEY, BASE_API_URL, POSTER_W500 } from '../utilities/Constans'\r\n\r\n\r\n//==== Fetch all movies ====\r\nexport async function getMoviesDataToDisplayInSearch(input){\r\n  let allMoviesData\r\n  if (typeof input === 'string'){  // if url\r\n    allMoviesData = await getAllMoviesData(input)\r\n  } else if (typeof input === 'object'){\r\n    allMoviesData = input\r\n  } else {\r\n    console.error(`Passed ${typeof input} input to getMoviesDataToDisplayInSearch. You must pass string or object`)\r\n    return \r\n  }\r\n\r\n  return allMoviesData.map(movie => [\r\n    movie.original_title,\r\n    movie.id,\r\n    POSTER_W500 + movie.poster_path\r\n  ])\r\n}\r\n\r\nexport async function getAllMoviesData(url){\r\n  const response = await axios.get(url)\r\n  console.log(typeof response)\r\n  return response.data.results\r\n}\r\n\r\n\r\n//==== Fetch one movie ====\r\nexport async function getMovieData(movieID){\r\n  const response = await axios.get(`${BASE_API_URL}/3/movie/${movieID}?&${API_KEY}`)\r\n  return response.data\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/no_image.2f8a70e1.png\";","import { useContext } from 'react'\r\nimport '../styles/main.scss'\r\nimport { Link } from 'react-router-dom'\r\nimport { AppContext } from './AppContext'\r\nimport { NOT_FOUND_POSTER_W500 } from '../utilities/Constans'\r\nimport no_image from '../images/no_image.png'\r\n\r\n\r\nexport default function FullscreenSearch() {\r\n  const {searchbarText, suggestions, setSliceNumber,  setMovieID} = useContext(AppContext)\r\n\r\n  const suggestionsSelectedFullscreen = value => {\r\n    setMovieID(value[1])\r\n    setSliceNumber(5)\r\n  }\r\n\r\n  return (\r\n    <div className='StartPageCardTransition'>\r\n\r\n    <div className='StartPageCard'>\r\n      <p className='Popular'>{searchbarText === '' || searchbarText === null ? 'Trending Now' : ''}</p>\r\n      <div className='row'>\r\n        {suggestions.map((item, index) => \r\n          <div className='cardContainer col-xl-2 col-md-3 col-4' key={index}>\r\n            <Link to={`/movie/${item[1]}`} className='linkStyle'>\r\n              <div className='cardFS' onClick={() => suggestionsSelectedFullscreen(item)}>\r\n                <img \r\n                  className='posterImage' \r\n                  src={item[2] !== NOT_FOUND_POSTER_W500 ? item[2] : no_image}\r\n                  alt='movie poster'\r\n                />\r\n                <h1 className='FS-title'>{item[0]}</h1>\r\n              </div>\r\n            </Link>\r\n        </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n  )\r\n}","import { useState, useContext } from 'react'\r\nimport '../styles/main.scss'\r\nimport { useScrollPosition } from '@n8tb1t/use-scroll-position'\r\nimport { AppContext } from './AppContext'\r\n\r\nexport default function StartPageSearch() {\r\n  const {searchbarText, oldSearchbarText, handleChange, handleClickOnInput} = useContext(AppContext)\r\n\r\n  const [changeStyle, setChangeStyle] = useState(false)\r\n  useScrollPosition(({ prevPos, currPos }) => {\r\n    (currPos.y < -20) ? setChangeStyle(true) : setChangeStyle(false)    // is it implelented i scss?\r\n    // console.log(changeStyle, currPos.y)\r\n  })\r\n\r\n  return (\r\n    <div className={'col-lg-6 col-md-8 col-sm-9 col-12 st-search ' + (changeStyle && 'st-animation')}>\r\n      <div className='row'>\r\n        <div className='col-12' >\r\n          <form onSubmit={e => { e.preventDefault()}}>\r\n            <input\r\n              onChange={handleChange}\r\n              className={'myForm1 ' + (changeStyle && 'myForm-animation')}\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText !== '' ? searchbarText : oldSearchbarText}\r\n              onClick={handleClickOnInput}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import StartPageCard from './StartPageCard'\r\nimport StartPageSearch from './StartPageSearch'\r\nimport { motion } from \"framer-motion\"\r\n\r\nexport default function StartPage() {\r\n  return (\r\n    <motion.div \r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1}}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 1 }}\r\n    > \r\n      <StartPageSearch />\r\n      <StartPageCard />\r\n    </motion.div> \r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/tmdb.6852b1ef.svg\";","import { Component } from 'react';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport '../styles/main.scss'\r\nimport './ScroolbarStyle.scss';\r\n\r\nexport default class Example extends Component {\r\n  componentDidMount() {\r\n      this.setState({ onXReachEnd: () => console.log() });\r\n  }\r\n\r\n  render() {\r\n    const {show, text} = this.props\r\n    return (\r\n      <ScrollBar className={(show && text) ? 'MovieSearchScroolbar' : 'offScroolBar MovieSearchScroolbar'}>\r\n        {this.props.children}\r\n      </ScrollBar>\r\n    )\r\n  }\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect, useContext } from 'react'\r\nimport ArrowKeysReact from 'arrow-keys-react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { AppContext } from './AppContext'\r\nimport '../styles/main.scss'\r\nimport { getMoviesDataToDisplayInSearch } from '../utilities/FetchFunctions'\r\nimport { NOT_FOUND_POSTER_W500 } from '../utilities/Constans'\r\nimport TMDBLogo from '../images/tmdb.svg'\r\nimport MovieSearchScroolbar from '../Scroolbar/MovieSearchScroolbar'\r\nimport no_image from '../images/no_image.png'\r\n\r\n\r\nexport default function MovieSearch (props) {\r\n  const [cursor, setCursor] = useState(0)\r\n\r\n  const {show, setShow, node, suggestionsSelected} = props\r\n\r\n  const {searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, suggestions, setSuggestions, queryData, setQueryData, sliceNumber, handleChange, handleClickOnInput, fetchPopularMoviesOnStartPage} = useContext(AppContext)\r\n\r\n  const gotoStarPage = () => {\r\n    setQueryData([])\r\n    setSearchbarText('')\r\n    fetchPopularMoviesOnStartPage()\r\n  }\r\n\r\n\r\n    // ==== Search arrow up and down logic ====\r\n    \r\n    ArrowKeysReact.config({\r\n      up: () => {\r\n        isNaN(cursor)\r\n          ? setCursor(sliceNumber)\r\n          : cursor < 0\r\n          ? setCursor(sliceNumber)\r\n          : setCursor(prevState => prevState - 1)\r\n      },\r\n      down: () => {\r\n        isNaN(cursor)\r\n          ? setCursor(0)\r\n          : cursor > sliceNumber\r\n          ? setCursor(0)\r\n          : setCursor(prevState => prevState + 1)\r\n      }\r\n    })\r\n  \r\n    const enterPressed = e => {\r\n      var code = e.keyCode || e.which\r\n      if (code === 13) {\r\n        // enter key\r\n        // zmienna kursor kt�ra �ledzi kt�ry li jest pod�wietlony daje nam indeks za pomoc� kt�rego mo�emy uzyska� id filmu z oryginalnej tablicy\r\n        // dodanie pojawienie paska po wcisnieciu enter\r\n        if (show) {\r\n          if (cursor === sliceNumber) {\r\n            showMore()\r\n          } else {\r\n            suggestionsSelected(suggestions[cursor])\r\n            setShow(false)\r\n            setSearchbarText(oldSearchbarText)\r\n          }\r\n        } else {\r\n          if (cursor === sliceNumber) {\r\n            showMore()\r\n          } else {\r\n            setSearchbarText(oldSearchbarText)\r\n            setOldSearchbarText('')\r\n          }\r\n          setShow(true)\r\n        }\r\n      }\r\n    } // ==== END Search arrow up and down logic ====\r\n\r\n  // *** show more button ***\r\n  const history = useHistory()\r\n\r\n  const showMore = e => {\r\n      history.push(`/`)\r\n      // setSliceNumber(20)\r\n  }\r\n\r\n  // useEffect(async() => {\r\n  //   if(queryData.length > 0){\r\n  //     setSuggestions(await getMoviesDataToDisplayInSearch(queryData).slice(0, sliceNumber))\r\n  //   }\r\n  // }, [sliceNumber])\r\n  // END show more button\r\n\r\n// ==== Pod�wietlenie tekstu ====\r\nfunction getHighlightedText(text, highlight, index) {\r\n  const parts = text.split(new RegExp(`(${highlight})`, 'gi'))\r\n\r\n  return <span> { parts.map((part, i) => \r\n    <span \r\n      key={i} \r\n      style=\r\n      {(part.toLowerCase() === highlight.toLowerCase() && cursor !== index)\r\n        ? { color: '#00FC87', fontWeight: 'bold' } \r\n        : part.toLowerCase() === highlight.toLowerCase() \r\n          ? { fontWeight: 'bold'}\r\n          : {}} \r\n    >\r\n        { part }\r\n    </span>)\r\n  } </span>;\r\n}\r\n\r\nconst onMouseEnterHandle = e => {\r\n  setCursor(parseInt(e.target.getAttribute('index')))\r\n}\r\n// ==== END Pod�wietlenie tekstu ====\r\n\r\n\r\nconst renderSugestions = () => {\r\n  if (queryData.length > 0) {\r\n    return (\r\n      <MovieSearchScroolbar show={show} text={searchbarText}>\r\n      <ul \r\n        className={(show && searchbarText) ? 'animate list' : 'list'} >\r\n      {suggestions.map((item, index) => \r\n      <Link to={`/movie/${item[1]}`} className='linkStyle'>\r\n        <li \r\n          className={cursor === index ? 'active tt-suggestion' : 'tt-suggestion'}\r\n          onClick={()=> suggestionsSelected(item)}\r\n          onMouseEnter={onMouseEnterHandle} \r\n          index={index}\r\n          key={index}\r\n        >\r\n          <div className='row'>\r\n            <img \r\n              src={item[2] !== NOT_FOUND_POSTER_W500 ? item[2] : no_image} \r\n              className='col-lg-2 col-md-3 col-sm-4 col-3 Image'\r\n              alt='movie poster'\r\n            />\r\n            <p \r\n              className='col-lg-10 col-md-9 col-sm-8 col-9 textSugestion sugest'>\r\n              {getHighlightedText(item[0], searchbarText, index)}\r\n            </p>\r\n          </div>\r\n        </li>\r\n      </Link>)}\r\n        \r\n        <li style={{visibility: queryData.length > suggestions.length ? \"visible\": \"collapse\"}}>\r\n          <p \r\n            onClick={showMore} \r\n            index={sliceNumber}\r\n            className={cursor === sliceNumber \r\n            ? 'active textSugestion showMore tt-suggestion' \r\n            : 'textSugestion showMore tt-suggestion'}\r\n          >\r\n            show more\r\n          </p>\r\n        </li>\r\n      </ul>\r\n      </MovieSearchScroolbar>\r\n    )\r\n  } else {\r\n    if (searchbarText) {\r\n      return (\r\n        <ul className='animate list showMore noResult'>\r\n          <li>no result</li>\r\n        </ul>\r\n        )\r\n      } \r\n  }\r\n}\r\n\r\n  return (\r\n    <div className='searchContainer nopadding'>\r\n      <div className='row searchSecondContainer'>\r\n        <div className='col-xs-12 col-sm-3 col-lg-3 p-0'>\r\n          <Link to={`/`}>\r\n            <img src={TMDBLogo} className='logo'  alt='The Movie Database' onClick={gotoStarPage}/>\r\n          </Link>\r\n        </div>\r\n        \r\n        <div className='col-xs-12 col-sm-9 col-lg-9 p-0 pl-3 searchInside' ref={node}>\r\n          <form className='searchbox' onSubmit={e => { e.preventDefault()}}>\r\n            <input\r\n              onChange={handleChange}\r\n              className='myform'\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText !== '' ? searchbarText : oldSearchbarText}\r\n              onKeyPress={enterPressed}\r\n              onClick={handleClickOnInput}\r\n            />\r\n          </form>\r\n          {renderSugestions()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useEffect, useContext } from 'react'\r\nimport '../styles/main.scss'\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { AppContext } from './AppContext'\r\nimport { POSTER_W500 } from '../utilities/Constans'\r\nimport no_image from '../images/no_image.png'\r\n\r\n\r\nfunction nestedDataToString(nestedData) {\r\n  let nestedArray = [],\r\n      resultString\r\n  if (nestedData !== undefined) {\r\n    nestedData.forEach(item => {\r\n      nestedArray.push(item.name)\r\n    })\r\n  }\r\n  resultString = nestedArray.join(', ') // array to string\r\n  return resultString\r\n}\r\n\r\nexport default function Card() {\r\n  const {movieData, setBackgroundIMG} = useContext(AppContext)\r\n  const {original_title, overview, tagline, poster_path, production_companies, genres, backdrop_path, release_date, runtime } = movieData\r\n  let {revenue, vote_average} = movieData\r\n\r\n  const posterIMG = POSTER_W500 + poster_path,\r\n        productionList = nestedDataToString(production_companies),\r\n        genresList = nestedDataToString(genres),\r\n        backdropIMG = `https://image.tmdb.org/t/p/original${backdrop_path}`\r\n\r\n  // conditional statements for no data\r\n  if (vote_average === 'undefined' || vote_average === 0) {\r\n    vote_average = '-'\r\n  }\r\n\r\n  // dodaje spacje i $\r\n  if (revenue === 'undefined' || revenue === 0)\r\n    revenue = '-'\r\n  else\r\n    revenue = parseInt(revenue).toLocaleString() + ' $'\r\n\r\n\r\n  useEffect(() => {\r\n    setBackgroundIMG(backdropIMG)\r\n  })\r\n\r\n  return (\r\n    <div className='MovieCard'>\r\n      <AnimatePresence exitBeforeEnter>\r\n      <motion.div \r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1}}\r\n        exit={{ opacity: 0 }}\r\n        transition={{ duration: 1 }}\r\n\r\n        key={original_title} \r\n        className=\"Card nopadding row\" \r\n      >      \r\n      <div className='meta-data-container col-12 col-md-7 col-lg-8'>\r\n        <h1>{original_title}</h1>\r\n        <span className=\"tagline\">{tagline}</span>\r\n        <p>{overview}</p>\r\n        <div className=\"additional-details\">\r\n          <span className=\"genre-list\">{genresList}</span>\r\n          <span className=\"production-list\">{productionList}</span>\r\n          <div className=\"row nopadding release-details\">\r\n            <div className=\"col-6\"> Original Release: <span className=\"meta-data\">{release_date}</span></div>\r\n            <div className=\"col-6\"> Running Time: <span className=\"meta-data\">{runtime} min</span> </div>\r\n            <div className=\"col-6\"> Box Office: <span className=\"meta-data\">{revenue}</span></div>\r\n            <div className=\"col-6\"> Vote Average: <span className=\"meta-data\">{vote_average}</span></div>\r\n          </div>\r\n        </div> \r\n      </div>\r\n\r\n      <div className=\"poster-container nopadding order-md-first col-12 col-md-5 col-lg-4\">\r\n        <img \r\n          className='poster' \r\n          src={poster_path !== null ? posterIMG : no_image}\r\n          alt='poster'\r\n        />\r\n      </div>\r\n    </motion.div >\r\n    </AnimatePresence>\r\n  </div>\r\n  )\r\n}\r\n","import { useState, useEffect, useRef, useContext } from 'react'\r\nimport MovieSearch from './MovieSearch'\r\nimport MovieCard from './MovieCard'\r\nimport { AppContext } from './AppContext'\r\nimport { motion } from \"framer-motion\"\r\n\r\n\r\nexport default function Movie() {\r\n  const {searchbarText, setSearchbarText, setOldSearchbarText, setSliceNumber, setMovieID} = useContext(AppContext)\r\n\r\n\r\n  const suggestionsSelected = value => {\r\n    if (searchbarText && value !== undefined) {\r\n      setOldSearchbarText(searchbarText)\r\n      setSearchbarText('')\r\n      setMovieID(value[1])\r\n    }\r\n  }\r\n\r\n// ==== sugeston hide on click away ====\r\n  const [show, setShow] = useState(false)\r\n  const node = useRef()\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', handleClick)\r\n    return () => {\r\n      // return function to be called when unmounted\r\n      document.removeEventListener('mousedown', handleClick)\r\n    }\r\n  }, [])\r\n\r\n  const handleClick = e => {\r\n    if (node.current.contains(e.target)) {\r\n      setShow(true) // inside click\r\n    } else {\r\n      setShow(false) // outside click\r\n      setSliceNumber(5)\r\n    }\r\n  }\r\n  // ==== END sugeston hide on clic kaway ====\r\n\r\n  return (\r\n    <motion.div \r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1}}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 1 }}\r\n    >    \r\n      <MovieSearch {...{show, setShow, suggestionsSelected, node}}/> \r\n      <MovieCard/>\r\n    </motion.div>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/BgGreen2.a17d9a1b.jpg\";","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react'\r\nimport './styles/main.scss'\r\nimport { Route, Switch, useLocation } from 'react-router-dom'\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { AppContext } from './AppFiles/AppContext'\r\nimport AppScroolbar from './Scroolbar/AppScroolbar'\r\nimport { getMoviesDataToDisplayInSearch, getAllMoviesData, getMovieData } from './utilities/FetchFunctions'\r\nimport { API_KEY, BASE_API_URL, BASE_IMG_URL, INIT_BG_IMG, POPULAR_MOVIES_URL } from './utilities/Constans'\r\nimport ArrowKeysReact from 'arrow-keys-react'\r\nimport StartPage from './AppFiles/StartPage'\r\nimport Movie from './AppFiles/Movie'\r\nimport BgGreen2 from './images/BgGreen2.jpg'\r\n\r\n\r\nexport default function App () {\r\n// === Routes Data ===\r\n  const location = useLocation()  // key to app routes\r\n  const pathname = location.pathname\r\n  const getPathName = () => (\r\n    pathname.substring(0, pathname.lastIndexOf(\"/\") + 1)\r\n  )\r\n  const getInitialMovieID = () => (\r\n    pathname.substring(pathname.lastIndexOf(\"/\") + 1)\r\n  )\r\n// === END Routes Data ===\r\n\r\n\r\n\r\n\r\n// ==== Fetch StartPage ====\r\n  const [backgroundIMG, setBackgroundIMG] = useState(INIT_BG_IMG)\r\n  const [suggestions, setSuggestions] = useState([])\r\n  const [searchbarText, setSearchbarText] = useState('')\r\n\r\n  async function fetchPopularMoviesOnStartPage() {\r\n    setSuggestions(await getMoviesDataToDisplayInSearch(POPULAR_MOVIES_URL))\r\n  }\r\n\r\n  // if search is empty on main page it displays popular movies\r\n  // loads at page starup because searchbarText === '' at start\r\n  // checks this condition every time\r\n  useEffect(() => {\r\n    if(searchbarText === '') fetchPopularMoviesOnStartPage()\r\n  }, [searchbarText])\r\n// ==== END Fetch StartPage ====\r\n\r\n\r\n// ==== Fetch movie page based on movieID parameter ====\r\n  const [movieID, setMovieID] = useState(getInitialMovieID())\r\n  const [movieData, setMovieData] = useState({})\r\n  \r\n  useEffect(async () => {\r\n    setMovieData(await getMovieData(movieID))\r\n  }, [movieID])\r\n// ==== END Fetch movie page ====\r\n\r\n\r\n\r\n// ==== Search state and functions ====\r\n  // queryData - all data that we get from API\r\n  const [queryData, setQueryData] = useState([])\r\n  // sliceNumber - how many results are displayed on quick search\r\n  const [sliceNumber, setSliceNumber] = useState(5) \r\n  const [oldSearchbarText, setOldSearchbarText] = useState('')\r\n\r\n\r\n  const handleChange = e => {\r\n    const value = e.target.value.replace(/[^\\w\\s]/gi, '')\r\n    setSearchbarText(value)\r\n    showResInSearchBar(value)\r\n  }\r\n\r\n  const showResInSearchBar = async (value) =>{\r\n    if (value.length === 0) setOldSearchbarText('')\r\n    if (value.length >= 1) {\r\n      const url = `${BASE_API_URL}/3/search/movie?query=%${value}&${API_KEY}`\r\n\r\n      const allMoviesData = await getAllMoviesData(url)\r\n      const dataToDisplay = await getMoviesDataToDisplayInSearch(allMoviesData)\r\n      const movies = dataToDisplay.slice(0, sliceNumber)\r\n\r\n      setSuggestions(movies)\r\n      setQueryData(allMoviesData)\r\n      setOldSearchbarText(value)\r\n    }\r\n  }\r\n\r\n  const handleClickOnInput = async e => {\r\n    if (searchbarText === '') {\r\n      showResInSearchBar(oldSearchbarText)\r\n      setSearchbarText(oldSearchbarText)\r\n      setOldSearchbarText('')\r\n    }\r\n  }\r\n// ==== END Search state and functions ====\r\n\r\n\r\n\r\n// ==== Console log stuff ====\r\n  useEffect(() => {\r\n    console.log(`%c queryData.length: ${queryData.length}`, 'color: pink')\r\n    console.log(`%c suggestions.length: ${suggestions.length}`, 'color: pink')\r\n  }, [queryData])\r\n\r\n  useEffect(() => {\r\n    console.log({suggestions})\r\n  }, [suggestions])\r\n\r\n  useEffect(() => {\r\n    console.log({movieData})\r\n  }, [movieData])\r\n\r\n  useEffect(() => {\r\n    console.log(`searchbarText: ${searchbarText}`)\r\n  }, [searchbarText])\r\n\r\n  useEffect(() => {\r\n    console.log(`sliceNumber: ${sliceNumber}`)\r\n  }, [sliceNumber])\r\n\r\n  useEffect(() => {\r\n    console.log(`backgroundIMG: ${backgroundIMG}`)\r\n  }, [backgroundIMG])\r\n\r\n// ==== END Console log stuff ====\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        id='app'\r\n        {...ArrowKeysReact.events}\r\n        tabIndex='1'\r\n      >\r\n        <AppContext.Provider \r\n          value={{movieID, movieData, searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, sliceNumber, setSliceNumber, suggestions, setSuggestions, handleChange, handleClickOnInput, queryData, setQueryData, setMovieID, fetchPopularMoviesOnStartPage, backgroundIMG, setBackgroundIMG, BASE_IMG_URL}}\r\n        >\r\n        <AppScroolbar>\r\n          <AnimatePresence exitBeforeEnter>\r\n            <Switch location={location} key={getPathName()}>\r\n              <Route exact path='/' render={() => <StartPage/>} />\r\n              <Route exact path={`/movie/:${movieID}`} render={() => <Movie/>} />\r\n            </Switch>\r\n          </AnimatePresence>\r\n        </AppScroolbar>\r\n        </AppContext.Provider>\r\n      </div>\r\n\r\n      <div className='BgGradient'/>\r\n      <AnimatePresence >\r\n        <motion.img \r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          exit={{ opacity: 0 }}\r\n          transition={{duration: 1.5}}\r\n          src={backgroundIMG !== `${BASE_IMG_URL}originalnull` ? backgroundIMG : BgGreen2}\r\n          key={backgroundIMG}\r\n          className='BgImage'\r\n        />\r\n      </AnimatePresence>\r\n\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './testingFiles/serviceWorker'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}