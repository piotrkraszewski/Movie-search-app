{"version":3,"sources":["AppFiles/AppContext.js","Scroolbar/AppScroolbar.js","images/no_image.png","AppFiles/StartPageCard.js","AppFiles/StartPageSearch.js","Scroolbar/MovieSearchScroolbar.js","AppFiles/StartPage.js","images/tmdb.svg","AppFiles/MovieSearch.js","AppFiles/MovieCard.js","AppFiles/Movie.js","App.js","testingFiles/serviceWorker.js","index.js"],"names":["AppContext","createContext","Example","this","setState","onXReachEnd","console","log","className","props","children","Component","FullscreenSearch","useContext","searchbarText","suggestions","setSliceNumber","setMovieID","map","item","index","to","onClick","src","no_image","StartPageSearch","oldSearchbarText","handleChange","handleClickOnInput","useState","changeStyle","setChangeStyle","useScrollPosition","prevPos","currPos","y","onSubmit","e","preventDefault","onChange","type","placeholder","value","show","text","StartPage","div","initial","opacity","animate","exit","transition","duration","SearchBox","setShow","node","suggestionsSelected","setSearchbarText","setOldSearchbarText","cursor","setCursor","setSuggestions","queryData","setQueryData","sliceNumber","fetchStartPage","ArrowKeysReact","config","up","isNaN","prevState","down","history","useHistory","showMore","push","length","getHighlightedText","highlight","parts","split","RegExp","part","i","style","toLowerCase","color","fontWeight","useEffect","movies","a","original_title","id","poster_path","slice","onMouseEnterHandle","parseInt","target","getAttribute","TMDBLogo","alt","ref","onKeyPress","keyCode","which","onMouseEnter","visibility","nestedDataToString","nestedData","nestedArray","undefined","forEach","name","join","Card","movieData","setBackgroundIMG","backgroundIMG","overview","tagline","production_companies","genres","backdrop_path","release_date","runtime","revenue","vote_average","posterIMG","productionList","genresList","backdropIMG","numeral","format","exitBeforeEnter","Movie","useRef","document","addEventListener","handleClick","removeEventListener","current","contains","App","location","useLocation","startPageUrl","axios","get","response","res","data","results","popularMovies","pathname","substring","lastIndexOf","getInitialMovieID","movieID","setMovieData","movieUrl","fetchMovieFromApi","showResInSearchBar","url","then","events","tabIndex","Provider","replace","exact","path","render","getPathName","img","Boolean","window","hostname","match","ReactDOM","basename","process","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.119fb4a6.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nexport const AppContext = createContext(null)","import { Component } from 'react';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport '../styles/main.scss'\r\nimport './ScroolbarStyle.scss';\r\n\r\nexport default class Example extends Component {\r\n  componentDidMount() {\r\n      this.setState({ onXReachEnd: () => console.log() });\r\n  }\r\n\r\n  render() {\r\n    // const {show, text} = this.props\r\n    return (\r\n      <ScrollBar className={'AppScroolbar'}>\r\n        {this.props.children}\r\n      </ScrollBar>\r\n    )\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/no_image.2f8a70e1.png\";","import { useContext } from 'react'\r\nimport '../styles/main.scss'\r\nimport { Link } from 'react-router-dom'\r\nimport { AppContext } from './AppContext'\r\nimport no_image from '../images/no_image.png'\r\n\r\n\r\nexport default function FullscreenSearch() {\r\n  const {searchbarText, suggestions, setSliceNumber,  setMovieID} = useContext(AppContext)\r\n\r\n  const suggestionsSelectedFullscreen = value => {\r\n    setMovieID(value[1])\r\n    setSliceNumber(5)\r\n  }\r\n\r\n  return (\r\n    <div className='StartPageCardTransition'>\r\n\r\n    <div className='StartPageCard'>\r\n      <p className='Popular'>{searchbarText === '' || searchbarText === null ? 'Trending Now' : ''}</p>\r\n      <div className='row'>\r\n        {suggestions.map((item, index) => \r\n          <div className='cardContainer col-xl-2 col-md-3 col-4' key={index}>\r\n            <Link to={`/movie/${item[1]}`} className='linkStyle'>\r\n              <div className='cardFS' onClick={() => suggestionsSelectedFullscreen(item)}>\r\n                <img className='posterImage' src={item[2] !== 'https://image.tmdb.org/t/p/w500null' ? item[2] : no_image}/>\r\n                <h1 className='FS-title'>{item[0]}</h1>\r\n              </div>\r\n            </Link>\r\n        </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n  )\r\n}","import { useState, useContext } from 'react'\r\nimport '../styles/main.scss'\r\nimport { useScrollPosition } from '@n8tb1t/use-scroll-position'\r\nimport { AppContext } from './AppContext'\r\n\r\nexport default function StartPageSearch() {\r\n  const {searchbarText, oldSearchbarText, handleChange, handleClickOnInput} = useContext(AppContext)\r\n\r\n  const [changeStyle, setChangeStyle] = useState(false)\r\n  useScrollPosition(({ prevPos, currPos }) => {\r\n    (currPos.y < -20) ? setChangeStyle(true) : setChangeStyle(false)    // is it implelented i scss?\r\n    // console.log(changeStyle, currPos.y)\r\n  })\r\n\r\n  return (\r\n    <div className={'col-lg-6 col-md-8 col-sm-9 col-12 st-search ' + (changeStyle && 'st-animation')}>\r\n      <div className='row'>\r\n        <div className='col-12' >\r\n          <form onSubmit={e => { e.preventDefault()}}>\r\n            <input\r\n              onChange={handleChange}\r\n              className={'myForm1 ' + (changeStyle && 'myForm-animation')}\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText !== '' ? searchbarText : oldSearchbarText}\r\n              onClick={handleClickOnInput}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import  { Component } from 'react';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport '../styles/main.scss'\r\nimport './ScroolbarStyle.scss';\r\n\r\nexport default class Example extends Component {\r\n  componentDidMount() {\r\n      this.setState({ onXReachEnd: () => console.log() });\r\n  }\r\n\r\n  render() {\r\n    const {show, text} = this.props\r\n    return (\r\n      <ScrollBar className={(show && text) ? 'MovieSearchScroolbar' : 'offScroolBar MovieSearchScroolbar'}>\r\n        {this.props.children}\r\n      </ScrollBar>\r\n    )\r\n  }\r\n}","import StartPageCard from './StartPageCard'\r\nimport StartPageSearch from './StartPageSearch'\r\nimport { motion } from \"framer-motion\"\r\nimport Scroolbar from '../Scroolbar/MovieSearchScroolbar'\r\n\r\nexport default function StartPage() {\r\n  return (\r\n    <motion.div \r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1}}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 1 }}\r\n    > \r\n    {/* <Scroolbar show={true} text={true}> */}\r\n      <StartPageSearch />\r\n      <StartPageCard />\r\n      {/* </Scroolbar> */}\r\n    </motion.div> \r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/tmdb.6852b1ef.svg\";","import { useEffect, useContext } from 'react'\r\nimport ArrowKeysReact from 'arrow-keys-react'\r\nimport {Link, useHistory } from 'react-router-dom'\r\nimport { AppContext } from './AppContext'\r\nimport '../styles/main.scss'\r\nimport TMDBLogo from '../images/tmdb.svg'\r\nimport MovieSearchScroolbar from '../Scroolbar/MovieSearchScroolbar'\r\nimport no_image from '../images/no_image.png'\r\n\r\n\r\nexport default function SearchBox (props) {\r\n  const {show, setShow, node, suggestionsSelected} = props\r\n\r\n  const {searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, cursor, setCursor, suggestions, setSuggestions, queryData, setQueryData, sliceNumber, setSliceNumber, handleChange, handleClickOnInput, fetchStartPage} = useContext(AppContext)\r\n\r\n  const gotoStarPage = () => {\r\n    setQueryData([])\r\n    setSearchbarText('')\r\n    fetchStartPage()\r\n  }\r\n\r\n\r\n    // ==== Search arrow up and down logic ====\r\n    \r\n    ArrowKeysReact.config({\r\n      up: () => {\r\n        isNaN(cursor)\r\n          ? setCursor(sliceNumber)\r\n          : cursor < 0\r\n          ? setCursor(sliceNumber)\r\n          : setCursor(prevState => prevState - 1)\r\n      },\r\n      down: () => {\r\n        isNaN(cursor)\r\n          ? setCursor(0)\r\n          : cursor > sliceNumber\r\n          ? setCursor(0)\r\n          : setCursor(prevState => prevState + 1)\r\n      }\r\n    })\r\n  \r\n    const enterPressed = e => {\r\n      var code = e.keyCode || e.which\r\n      if (code === 13) {\r\n        // enter key\r\n        // zmienna kursor kt�ra �ledzi kt�ry li jest pod�wietlony daje nam indeks za pomoc� kt�rego mo�emy uzyska� id filmu z oryginalnej tablicy\r\n        // dodanie pojawienie paska po wcisnieciu enter\r\n        if (show) {\r\n          if (cursor === sliceNumber) {\r\n            showMore()\r\n          } else {\r\n            suggestionsSelected(suggestions[cursor])\r\n            setShow(false)\r\n            setSearchbarText(oldSearchbarText)\r\n          }\r\n        } else {\r\n          if (cursor === sliceNumber) {\r\n            showMore()\r\n          } else {\r\n            setSearchbarText(oldSearchbarText)\r\n            setOldSearchbarText('')\r\n          }\r\n          setShow(true)\r\n        }\r\n      }\r\n    } // ==== END Search arrow up and down logic ====\r\n\r\n  // *** show more button ***\r\n  const history = useHistory()\r\n\r\n  const showMore = e => {\r\n    if (sliceNumber >= 10){\r\n      history.push(`/`)\r\n      setSliceNumber(20)  // moze jakos inaczej to rozwiaza�\r\n    } else {\r\n      if(suggestions.length > 0){\r\n        setSliceNumber(sliceNumber => sliceNumber + 5)\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(queryData.length > 0){\r\n      let movies = queryData\r\n        .map(a => [\r\n          a.original_title,\r\n          a.id,\r\n          `https://image.tmdb.org/t/p/w500${a.poster_path}`\r\n        ])\r\n        .slice(0, sliceNumber)\r\n      setSuggestions(movies)\r\n    }\r\n  }, [sliceNumber])\r\n  // END show more button\r\n\r\n// ==== Pod�wietlenie tekstu ====\r\nfunction getHighlightedText(text, highlight, index) {\r\n  const parts = text.split(new RegExp(`(${highlight})`, 'gi'))\r\n\r\n  return <span> { parts.map((part, i) => \r\n    <span \r\n      key={i} \r\n      style=\r\n      {(part.toLowerCase() === highlight.toLowerCase() && cursor !== index)\r\n        ? { color: '#00FC87', fontWeight: 'bold' } \r\n        : part.toLowerCase() === highlight.toLowerCase() \r\n          ? { fontWeight: 'bold'}\r\n          : {}} \r\n    >\r\n        { part }\r\n    </span>)\r\n  } </span>;\r\n}\r\n\r\nconst onMouseEnterHandle = e => {\r\n  setCursor(parseInt(e.target.getAttribute('index')))\r\n}\r\n// ==== END Pod�wietlenie tekstu ====\r\n\r\n\r\nconst renderSugestions = () => {\r\n  if (queryData.length > 0) {\r\n    return (\r\n      <MovieSearchScroolbar show={show} text={searchbarText}>\r\n      <ul \r\n        className={(show && searchbarText) ? 'animate list' : 'list'} >\r\n      {suggestions.map((item, index) => \r\n      <Link to={`/movie/${item[1]}`} className='linkStyle'>\r\n        <li \r\n          className={cursor === index ? 'active tt-suggestion' : 'tt-suggestion'}\r\n          onClick={()=> suggestionsSelected(item)}\r\n          onMouseEnter={onMouseEnterHandle} \r\n          index={index}\r\n          key={index}\r\n        >\r\n          <div className='row'>\r\n            <img \r\n            src={item[2] !== 'https://image.tmdb.org/t/p/w500null' ? item[2] : no_image} \r\n            className='col-lg-2 col-md-3 col-sm-4 col-3 Image'/>\r\n            <p className='col-lg-10 col-md-9 col-sm-8 col-9 textSugestion sugest'>\r\n              {getHighlightedText(item[0], searchbarText, index)}\r\n            </p>\r\n          </div>\r\n        </li>\r\n      </Link>)}\r\n        \r\n        <li style={{visibility: queryData.length > suggestions.length ? \"visible\": \"collapse\"}}>\r\n          <p \r\n            onClick={showMore} \r\n            index={sliceNumber}\r\n            className={cursor === sliceNumber \r\n            ? 'active textSugestion showMore tt-suggestion' \r\n            : 'textSugestion showMore tt-suggestion'}\r\n            >\r\n              { sliceNumber >= 10 ? 'full screen search' \r\n              : suggestions.length > 0 ? 'show more' \r\n              : 'no result'}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n      </MovieSearchScroolbar>\r\n    )\r\n  } else {\r\n    if (searchbarText) {\r\n      return (\r\n        <ul className='animate list showMore noResult'>\r\n          <li>no result</li>\r\n        </ul>\r\n        )\r\n      } \r\n  }\r\n}\r\n\r\n  return (\r\n    <div className='searchContainer nopadding'>\r\n      <div className='row searchSecondContainer'>\r\n        <div className='col-xs-12 col-sm-3 col-lg-3 p-0'>\r\n          <Link to={`/`}>\r\n            <img src={TMDBLogo} className='logo'  alt='The Movie Database' onClick={gotoStarPage}/>\r\n          </Link>\r\n        </div>\r\n        \r\n        <div className='col-xs-12 col-sm-9 col-lg-9 p-0 pl-3 searchInside' ref={node}>\r\n          <form className='searchbox' onSubmit={e => { e.preventDefault()}}>\r\n            <input\r\n              onChange={handleChange}\r\n              className='myform'\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText !== '' ? searchbarText : oldSearchbarText}\r\n              onKeyPress={enterPressed}\r\n              onClick={handleClickOnInput}\r\n            />\r\n          </form>\r\n          {renderSugestions()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useEffect, useContext } from 'react'\r\nimport '../styles/main.scss'\r\nimport numeral from 'numeral'\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { AppContext } from './AppContext'\r\nimport no_image from '../images/no_image.png'\r\n\r\n\r\nfunction nestedDataToString(nestedData) {\r\n  let nestedArray = [],\r\n      resultString\r\n  if (nestedData !== undefined) {\r\n    nestedData.forEach(item => {\r\n      nestedArray.push(item.name)\r\n    })\r\n  }\r\n  resultString = nestedArray.join(', ') // array to string\r\n  return resultString\r\n}\r\n\r\nexport default function Card() {\r\n  const {movieData, backgroundIMG, setBackgroundIMG} = useContext(AppContext)\r\n  const {original_title, overview, tagline, poster_path, production_companies, genres, backdrop_path, release_date, runtime } = movieData\r\n  let {revenue, vote_average} = movieData\r\n\r\n  const posterIMG = `https://image.tmdb.org/t/p/w500${poster_path}`,\r\n        productionList = nestedDataToString(production_companies),\r\n        genresList = nestedDataToString(genres),\r\n        backdropIMG = `https://image.tmdb.org/t/p/original${backdrop_path}`\r\n\r\n  // conditional statements for no data\r\n  if (vote_average === 'undefined' || vote_average === 0) {\r\n    vote_average = '-'\r\n  }\r\n\r\n  // dodaje $ i przecinki\r\n  if (revenue === 'undefined' || revenue === 0)\r\n    revenue = '-'\r\n  else\r\n    revenue = numeral(revenue).format('($0,0)')\r\n\r\n// add changing background logic !!!\r\n    \r\n  useEffect(() => {\r\n    setBackgroundIMG(backdropIMG)\r\n  })\r\n\r\n  return (\r\n    <div className='MovieCard'>\r\n      <AnimatePresence exitBeforeEnter>\r\n      <motion.div \r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1}}\r\n        exit={{ opacity: 0 }}\r\n        transition={{ duration: 1 }}\r\n\r\n        key={original_title} \r\n        className=\"Card nopadding row\" \r\n      >      \r\n      <div className='meta-data-container col-12 col-md-7 col-lg-8'>\r\n        <h1>{original_title}</h1>\r\n        <span className=\"tagline\">{tagline}</span>\r\n        <p>{overview}</p>\r\n        <div className=\"additional-details\">\r\n          <span className=\"genre-list\">{genresList}</span>\r\n          <span className=\"production-list\">{productionList}</span>\r\n          <div className=\"row nopadding release-details\">\r\n            <div className=\"col-6\"> Original Release: <span className=\"meta-data\">{release_date}</span></div>\r\n            <div className=\"col-6\"> Running Time: <span className=\"meta-data\">{runtime} min</span> </div>\r\n            <div className=\"col-6\"> Box Office: <span className=\"meta-data\">{revenue}</span></div>\r\n            <div className=\"col-6\"> Vote Average: <span className=\"meta-data\">{vote_average}</span></div>\r\n          </div>\r\n        </div> \r\n      </div>\r\n\r\n      <div className=\"poster-container nopadding order-md-first col-12 col-md-5 col-lg-4\">\r\n        <img id=\"postertest\" className='poster' \r\n        src={poster_path !== 'null' ? posterIMG : no_image}/>\r\n      </div>\r\n    </motion.div >\r\n    </AnimatePresence>\r\n  </div>\r\n  )\r\n}\r\n","import { useState, useEffect, useRef, useContext } from 'react'\r\nimport MovieSearch from './MovieSearch'\r\nimport MovieCard from './MovieCard'\r\nimport { AppContext } from './AppContext'\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\n\r\n\r\nexport default function Movie() {\r\n  const {searchbarText, setSearchbarText, setOldSearchbarText, setSliceNumber, setMovieID} = useContext(AppContext)\r\n\r\n\r\n  const suggestionsSelected = value => {\r\n    if (searchbarText && value !== undefined) {\r\n      setOldSearchbarText(searchbarText)\r\n      setSearchbarText('')\r\n      setMovieID(value[1])\r\n    }\r\n  }\r\n\r\n// ==== sugeston hide on click away ====\r\n  const [show, setShow] = useState(false)\r\n  const node = useRef()\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', handleClick)\r\n    return () => {\r\n      // return function to be called when unmounted\r\n      document.removeEventListener('mousedown', handleClick)\r\n    }\r\n  }, [])\r\n\r\n  const handleClick = e => {\r\n    if (node.current.contains(e.target)) {\r\n      setShow(true) // inside click\r\n    } else {\r\n      setShow(false) // outside click\r\n      setSliceNumber(5)\r\n    }\r\n  }\r\n  // ==== END sugeston hide on clic kaway ====\r\n\r\n  return (\r\n    <motion.div \r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1}}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 1 }}\r\n    >    \r\n      <MovieSearch {...{show, setShow, suggestionsSelected, node}}/> \r\n      <MovieCard/>\r\n    </motion.div>\r\n  )\r\n}","import { useState, useEffect } from 'react'\r\nimport './styles/main.scss'\r\nimport { Route, Router, Switch, useLocation } from 'react-router-dom'\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { AppContext } from './AppFiles/AppContext'\r\nimport axios from 'axios'\r\nimport AppScroolbar from './Scroolbar/AppScroolbar'\r\nimport ArrowKeysReact from 'arrow-keys-react'\r\nimport StartPage from './AppFiles/StartPage'\r\nimport Movie from './AppFiles/Movie'\r\n// import BG_black from './images/BG_black.jpg'\r\n\r\nexport default function App () {\r\n  \r\n// === Routes Data ===\r\n  const location = useLocation()  // key to app routes\r\n  const getPathName = () => {\r\n    let pathname = location.pathname\r\n    pathname = pathname.substring(0, pathname.lastIndexOf(\"/\") + 1)\r\n    return pathname\r\n  }\r\n  const getInitialMovieID = () => {\r\n    const pathname = location.pathname\r\n    const movieID = pathname.substring(pathname.lastIndexOf(\"/\") + 1)\r\n    return movieID\r\n  }\r\n// === END Routes Data ===\r\n\r\n\r\n// ==== Fetch StartPage ====\r\n  // sets interseallar BgImage image on StarPage. Otherwise BgImage of searched movie\r\n  const [backgroundIMG, setBackgroundIMG] = useState('https://image.tmdb.org/t/p/original/rAiYTfKGqDCRIIqo664sY9XZIvQ.jpg')\r\n\r\n  const [suggestions, setSuggestions] = useState([])\r\n  const [searchbarText, setSearchbarText] = useState('')\r\n  let startPageUrl = `https://api.themoviedb.org/3/movie/popular?api_key=cfe422613b250f702980a3bbf9e90716&language=en-US&page=1`\r\n  \r\n  async function fetchStartPage() {\r\n    const response = await axios.get(startPageUrl)\r\n    const res = response.data.results\r\n    const popularMovies = res.map(a => [\r\n      a.original_title,\r\n      a.id,\r\n      `https://image.tmdb.org/t/p/w500${a.poster_path}`,\r\n    ])\r\n    setSuggestions(popularMovies)\r\n  }\r\n  \r\n  // if search is empty on main page it displays start page \r\n  // loads at page starup because searchbarText === '' at start\r\n  // checks this condition every time\r\n  useEffect(() => {\r\n    if(searchbarText === '' ){fetchStartPage()} \r\n  }, [searchbarText])\r\n// ==== END Fetch StartPage ====\r\n\r\n\r\n// ==== Fetch movie page based on movieID parameter ====\r\n  const [movieID, setMovieID] = useState(getInitialMovieID())\r\n  const [movieData, setMovieData] = useState({})\r\n  const movieUrl = `https://api.themoviedb.org/3/movie/${movieID}?&api_key=cfe422613b250f702980a3bbf9e90716`\r\n\r\n  useEffect(() => {\r\n    async function fetchMovieFromApi () {\r\n      const res = await axios.get(movieUrl)\r\n      setMovieData(res.data)\r\n    }\r\n    fetchMovieFromApi()\r\n  }, [movieID])\r\n// ==== END Fetch movie page ====\r\n\r\n\r\n\r\n// ==== Search state and functions ====\r\n  const [queryData, setQueryData] = useState([]) // all data that we get from API\r\n  const [sliceNumber, setSliceNumber] = useState(5) //how many results are displayed on quick search\r\n  const [oldSearchbarText, setOldSearchbarText] = useState('')\r\n  const [cursor, setCursor] = useState(0)\r\n\r\n  const handleChange = e => {\r\n    const value = e.target.value.replace(/[^\\w\\s]/gi, '')\r\n    setSearchbarText(value)\r\n    showResInSearchBar(value)\r\n  }\r\n\r\n  const showResInSearchBar = (value)=>{\r\n    if (value.length === 0) {\r\n      setOldSearchbarText('')\r\n    }\r\n    if (value.length >= 1) {\r\n      let url = `https://api.themoviedb.org/3/search/movie?query=%${value}&api_key=cfe422613b250f702980a3bbf9e90716`\r\n      axios.get(url).then(response => {\r\n        const res = response.data.results\r\n        const movies = res\r\n          .map(a => [\r\n            a.original_title,\r\n            a.id,\r\n            `https://image.tmdb.org/t/p/w500${a.poster_path}`,\r\n          ])\r\n          .slice(0, sliceNumber)\r\n        setSuggestions(movies)\r\n        setQueryData(response.data.results)\r\n        setOldSearchbarText(value)\r\n      })\r\n    } \r\n  }\r\n\r\n  const handleClickOnInput = async e => {\r\n    if (searchbarText === '') {\r\n      showResInSearchBar(oldSearchbarText)\r\n      setSearchbarText(oldSearchbarText)\r\n      setOldSearchbarText('')\r\n    }\r\n  }\r\n// ==== END Search state and functions ====\r\n\r\n\r\n\r\n// ==== Console log stuff ====\r\n  useEffect(() => {\r\n    console.log(`%c queryData.length: ${queryData.length}`, 'color: pink')\r\n    console.log(`%c suggestions.length: ${suggestions.length}`, 'color: pink')\r\n  }, [queryData])\r\n\r\n  useEffect(() => {\r\n    console.log({suggestions})\r\n  }, [suggestions])\r\n\r\n  useEffect(() => {\r\n    console.log({movieData})\r\n  }, [movieData])\r\n\r\n  useEffect(() => {\r\n    console.log('searchbarText: ' + searchbarText)\r\n  }, [searchbarText])\r\n\r\n  useEffect(() => {\r\n    console.log(`sliceNumber: ${sliceNumber}`)\r\n  }, [sliceNumber])\r\n\r\n// ==== END Console log stuff ====\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        id='app'\r\n        {...ArrowKeysReact.events}\r\n        tabIndex='1'\r\n      >\r\n        <AppContext.Provider \r\n          value={{movieID, movieData, searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, cursor, setCursor, sliceNumber, setSliceNumber, suggestions, setSuggestions, handleChange, handleClickOnInput, queryData, setQueryData, setMovieID, fetchStartPage, backgroundIMG, setBackgroundIMG}}\r\n        >\r\n        <AppScroolbar>\r\n          <AnimatePresence exitBeforeEnter>\r\n            <Switch location={location} key={getPathName()}>\r\n              <Route exact path='/' render={() => <StartPage/>} />\r\n              <Route exact path={`/movie/:${movieID}`} render={() => <Movie/>} />\r\n            </Switch>\r\n          </AnimatePresence>\r\n        </AppScroolbar>\r\n        </AppContext.Provider>\r\n      </div>\r\n\r\n      <div className='BgGradient'/>\r\n      <AnimatePresence >\r\n        <motion.img \r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          exit={{ opacity: 0 }}\r\n          // transition={ getPathName() === \"movie\" ? {duration: 2} : {duration: 1} }\r\n          transition={{duration: 1.5}}\r\n          src={backgroundIMG}\r\n          key={backgroundIMG}\r\n          className='BgImage'\r\n        />\r\n      </AnimatePresence>\r\n\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom'\r\n// import 'bootstrap'\r\nimport \"bootswatch/dist/darkly/bootstrap.min.css\"\r\nimport App from './App'\r\nimport * as serviceWorker from './testingFiles/serviceWorker'\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}