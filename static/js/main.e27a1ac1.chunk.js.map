{"version":3,"sources":["AppFiles/Contexts/AppContext.js","utilities/Scroolbar/AppScrollbar.js","utilities/Consts.js","utilities/RoutesFunctions.js","utilities/FetchFunctions.js","utilities/CalculateWindowHeightHook.js","images/BgGreen2.jpg","AppFiles/AppBackground.js","images/no_image.png","AppFiles/StartPage/StartPageCard.js","AppFiles/StartPage/StartPageSearchbar.js","AppFiles/StartPage/StartPage.js","AppFiles/Contexts/MovieSearchbarContext.js","AppFiles/Movie/MovieSearchbar/Hooks/GotoOtherRoutesHooks.js","AppFiles/Movie/MovieSearchbar/Results/MovieSearchbarResultsPC.js","AppFiles/Movie/MovieSearchbar/Hooks/HighlightTextInQuickSearchHooks.js","images/tmdb.svg","AppFiles/Movie/MovieSearchbar/MovieSearchbar.js","AppFiles/Movie/MovieSearchbar/Hooks/ArrowKeysNavigationInQuickSearchHooks.js","AppFiles/Movie/MovieSearchbar/Hooks/ShowHideQuickSearchHook.js","AppFiles/Movie/MovieCard/MovieCardFunctions.js","AppFiles/Movie/MovieCard/MovieCard.js","AppFiles/Movie/MoviePage.js","App.js","testingFiles/serviceWorker.js","index.js"],"names":["AppContext","createContext","AppScrollbar","props","isMobile","className","children","API_KEY","BASE_API_URL","BASE_IMG_URL","POSTER_W500","NOT_FOUND_POSTER_W500","NOT_FOUND_BG_IMG","POPULAR_MOVIES_URL","getCurrentPageUrl","location","pathname","substring","lastIndexOf","getMovieIdFromLocationPathname","getMoviesDataToDisplayInSearch","input","a","getAllMoviesData","allMoviesData","console","error","map","movie","original_title","id","poster_path","url","axios","get","response","data","results","createSearchMoviesUrl","value","getMovieData","movieID","CalculateWindowHeightHook","useEffect","setDocHeight","document","documentElement","style","setProperty","window","innerHeight","addEventListener","removeEventListener","AppBackground","backgroundIMG","img","initial","opacity","animate","exit","transition","duration","src","BgGreen2","FullscreenSearch","useContext","searchbarText","suggestions","setMovieID","item","index","to","onClick","no_image","alt","StartPageSearch","oldSearchbarText","onSearchbarTextChanging","handleClickOnInput","onSubmit","e","preventDefault","onChange","type","placeholder","StartPage","div","MovieSearchbarContext","GotoOtherRoutesHooks","setSearchbarText","pushToHistory","setAllMoviesData","fetchPopularMoviesOnStartPage","setShowQuickSearchRes","undefined","MovieSearchbarResults","showQuickSearchRes","indexOfHighlightedMovie","setIndexOfHighlightedMovie","text","highlight","parts","split","RegExp","part","i","toLowerCase","color","fontWeight","parseInt","target","getAttribute","HighlightTextInQuickSearchHooks","highligthText","highlightMovieTextOnHover","selectedMovieInQuickSearch","length","slice","onMouseEnter","MovieSearch","ArrowKeysReact","config","up","isNaN","prevState","down","keyCode","which","ArrowKeysNavigationInQuickSearchHooks","enterKeyPressedInQuickSearch","setOldSearchbarText","showResInSearchBar","node","useRef","hideOnOutsideClick","current","contains","ShowHideQuickSearchHook","OnMovieSearchBarClicked","gotoStarPage","TMDBLogo","ref","onKeyPress","nestedDataToString","nestedData","nestedArray","forEach","push","name","join","Card","movieData","overview","tagline","production_companies","genres","release_date","runtime","revenue","vote_average","posterIMG","productionList","genresList","toLocaleString","exitBeforeEnter","Movie","useState","Provider","App","useLocation","history","useHistory","setBackgroundIMG","setSuggestions","initMovieID","setInitMovieID","setMovieData","dataToDisplay","log","backdrop_path","events","tabIndex","replace","exact","path","render","Boolean","hostname","match","ReactDOM","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e27a1ac1.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nexport const AppContext = createContext(null)","import ScrollBar from 'react-perfect-scrollbar'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport './ScroolbarStyle.scss'\r\n\r\nexport default function AppScrollbar (props) {\r\n  // displays perfect scrollbar if not on mobile because I couldn't add refresh gesture on mobile\r\n  // https://github.com/goldenyz/react-perfect-scrollbar/issues/101\r\n  return (\r\n    isMobile ? (\r\n      <div className=\"overflow-y-auto\">\r\n        {props.children}\r\n      </div>\r\n    ) : (\r\n      <ScrollBar className='AppScroolbar'>\r\n        {props.children}\r\n      </ScrollBar>\r\n  ))\r\n}","export const API_KEY = 'api_key=cfe422613b250f702980a3bbf9e90716'\r\nexport const BASE_API_URL = 'https://api.themoviedb.org'\r\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/'\r\n// export const INIT_BG_IMG = 'https://image.tmdb.org/t/p/original/rAiYTfKGqDCRIIqo664sY9XZIvQ.jpg' // interstellar\r\n\r\nexport const POSTER_W500 = `${BASE_IMG_URL}w500`\r\nexport const NOT_FOUND_POSTER_W500 = `${POSTER_W500}null`\r\nexport const NOT_FOUND_BG_IMG = `${BASE_IMG_URL}originalnull`\r\n\r\n\r\nexport const POPULAR_MOVIES_URL = `${BASE_API_URL}/3/movie/popular?${API_KEY}` \r\n\r\n\r\nexport const NUM_OF_DISPLAYED_MOVIES_IN_QUICK_SEARCH = 5","export const getCurrentPageUrl = location => (\r\n  location.pathname.substring(0, location.pathname.lastIndexOf(\"/\") + 1)\r\n)\r\n\r\nexport const getMovieIdFromLocationPathname = location => (\r\n  location.pathname.substring(location.pathname.lastIndexOf(\"/\") + 1)\r\n)","import axios from 'axios'\r\nimport { API_KEY, BASE_API_URL, POSTER_W500 } from './Consts'\r\nimport { getMovieIdFromLocationPathname } from './RoutesFunctions'\r\n\r\n\r\n//==== Fetch all movies ====\r\nexport async function getMoviesDataToDisplayInSearch(input){\r\n  let allMoviesData\r\n  if (typeof input === 'string'){  // if url\r\n    allMoviesData = await getAllMoviesData(input)\r\n  } else if (typeof input === 'object'){\r\n    allMoviesData = input\r\n  } else {\r\n    console.error(`Passed ${typeof input} input to getMoviesDataToDisplayInSearch. You must pass string or object`)\r\n    return \r\n  }\r\n\r\n  return allMoviesData.map(movie => [\r\n    movie.original_title,\r\n    movie.id,\r\n    POSTER_W500 + movie.poster_path\r\n  ])\r\n}\r\n\r\nexport async function getAllMoviesData(url){\r\n  const response = await axios.get(url)\r\n  return response.data.results\r\n}\r\n\r\nexport function createSearchMoviesUrl(value){\r\n  return `${BASE_API_URL}/3/search/movie?query=%${value}&${API_KEY}`\r\n}\r\n\r\n//==== Fetch one movie ====\r\nexport async function getMovieData(movieID){\r\n  const response = await axios.get(`${BASE_API_URL}/3/movie/${movieID}?&${API_KEY}`)\r\n  return response.data\r\n}\r\n\r\nexport function setInitMovieID(location){\r\n  const initMovieID = getMovieIdFromLocationPathname(location)\r\n  if(initMovieID === '') return '157336' // interstellar\r\n  return initMovieID\r\n}","import { useEffect } from 'react'\r\n\r\nexport default function CalculateWindowHeightHook() {\r\n// calucluleta size of 1% of window height and saves it to variable\r\n// Proposal for new units to fix this \r\n// https://github.com/w3c/csswg-drafts/issues/4329\r\n// Solution from Jonas Sandstedt comment \r\n// https://chanind.github.io/javascript/2019/09/28/avoid-100vh-on-mobile-web.html\r\n\r\n  useEffect(() => {\r\n    function setDocHeight() {\r\n      document.documentElement.style.setProperty('--vh', `${window.innerHeight/100}px`)\r\n    }\r\n    window.addEventListener('resize', setDocHeight())\r\n    window.addEventListener('orientationchange', setDocHeight())\r\n\r\n    return () => {\r\n      // functions to be called when unmounted. not shure if it does anything here\r\n      document.removeEventListener('resize', setDocHeight)\r\n      document.removeEventListener('orientationchange', setDocHeight)\r\n    }\r\n  }, [])\r\n  \r\n  return (\r\n    <></>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/BgGreen2.a17d9a1b.jpg\";","import { motion, AnimatePresence } from \"framer-motion\"\r\nimport '../styles/main.scss'\r\nimport { NOT_FOUND_BG_IMG } from '../utilities/Consts'\r\nimport BgGreen2 from '../images/BgGreen2.jpg'\r\n\r\n\r\nexport default function AppBackground(props) {\r\n  const { backgroundIMG } = props\r\n  return (\r\n    <>\r\n      <div className='BgGradient'/>\r\n      <AnimatePresence>\r\n        <motion.img \r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          exit={{ opacity: 0 }}\r\n          transition={{duration: 1.5}}\r\n          \r\n          className='BgImage'\r\n          src={backgroundIMG !== NOT_FOUND_BG_IMG ? backgroundIMG : BgGreen2}\r\n          key={backgroundIMG}\r\n        />\r\n      </AnimatePresence>\r\n    </>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/no_image.2f8a70e1.png\";","import { useContext } from 'react'\r\nimport '../../styles/main.scss'\r\nimport { Link } from 'react-router-dom'\r\nimport { AppContext } from '../Contexts/AppContext'\r\nimport { NOT_FOUND_POSTER_W500 } from '../../utilities/Consts'\r\nimport no_image from '../../images/no_image.png'\r\n\r\n\r\nexport default function FullscreenSearch() {\r\n  const {searchbarText, suggestions, setMovieID} = useContext(AppContext)\r\n\r\n  const suggestionsSelectedFullscreen = value => {\r\n    setMovieID(value[1])\r\n  }\r\n\r\n  return (\r\n    <div className='StartPageCardTransition'>\r\n\r\n    <div className='StartPageCard'>\r\n      <p className='Popular'>{searchbarText === '' || searchbarText === null ? 'Trending Now' : ''}</p>\r\n      <div className='row'>\r\n        {suggestions.map((item, index) => \r\n          <div className='cardContainer col-xl-2 col-md-3 col-4' key={index}>\r\n            <Link to={`/movie/${item[1]}`} className='linkStyle'>\r\n              <div className='cardFS' onClick={() => suggestionsSelectedFullscreen(item)}>\r\n                <img \r\n                  className='posterImage' \r\n                  src={item[2] !== NOT_FOUND_POSTER_W500 ? item[2] : no_image}\r\n                  alt='movie poster'\r\n                />\r\n                <h1 className='FS-title'>{item[0]}</h1>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n  )\r\n}","import { useContext } from 'react'\r\nimport '../../styles/main.scss'\r\n// import { useScrollPosition } from '@n8tb1t/use-scroll-position'\r\nimport { AppContext } from '../Contexts/AppContext'\r\n\r\nexport default function StartPageSearch() {\r\n  const {searchbarText, oldSearchbarText, onSearchbarTextChanging, handleClickOnInput} = useContext(AppContext)\r\n\r\n  // const [changeStyle, setChangeStyle] = useState(false)\r\n  // useScrollPosition(({ prevPos, currPos }) => {\r\n  //   (currPos.y < -20) ? setChangeStyle(true) : setChangeStyle(false)    // is it implelented i scss?\r\n  //   console.log(changeStyle)\r\n  // })\r\n\r\n  return (\r\n    <div className='col-lg-6 col-md-8 col-sm-9 col-12 st-search st-animation'>\r\n      <div className='row'>\r\n        <div className='col-12' >\r\n          <form onSubmit={e => { e.preventDefault()}}>\r\n            <input\r\n              onChange={onSearchbarTextChanging}\r\n              className='myForm1 myForm-animation'\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText !== '' ? searchbarText : oldSearchbarText}\r\n              onClick={handleClickOnInput}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import StartPageCard from './StartPageCard'\r\nimport StartPageSearch from './StartPageSearchbar'\r\nimport { motion } from \"framer-motion\"\r\n\r\nexport default function StartPage() {\r\n  return (\r\n    <motion.div \r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 1 }}\r\n    > \r\n      <StartPageSearch />\r\n      <StartPageCard />\r\n    </motion.div> \r\n  )\r\n}","import {createContext} from 'react'\r\n\r\nexport const MovieSearchbarContext = createContext(null)","import { useContext } from 'react'\r\nimport { AppContext } from '../../../Contexts/AppContext'\r\nimport { MovieSearchbarContext } from '../../../Contexts/MovieSearchbarContext'\r\n\r\n\r\nexport default function GotoOtherRoutesHooks() {\r\n  const { searchbarText, setSearchbarText, oldSearchbarText,  setMovieID, pushToHistory, setAllMoviesData, fetchPopularMoviesOnStartPage} = useContext(AppContext)\r\n  const { setShowQuickSearchRes } = useContext(MovieSearchbarContext)\r\n\r\n  function selectedMovieInQuickSearch(item){\r\n    if (searchbarText && item !== undefined) {\r\n      pushToHistory(`/movie/${item[1]}`)\r\n      setSearchbarText(oldSearchbarText)\r\n      setShowQuickSearchRes(false)\r\n      setMovieID(item[1])\r\n    }\r\n  }\r\n\r\n  const gotoStarPage = () => {\r\n    setAllMoviesData([])\r\n    setSearchbarText('')\r\n    fetchPopularMoviesOnStartPage()\r\n    pushToHistory(`/`)\r\n  }\r\n\r\n  return [selectedMovieInQuickSearch, gotoStarPage]\r\n}","import { useContext } from 'react'\r\nimport { AppContext } from '../../../Contexts/AppContext'\r\nimport '../../../../styles/main.scss'\r\nimport { MovieSearchbarContext } from '../../../Contexts/MovieSearchbarContext'\r\nimport { NOT_FOUND_POSTER_W500, NUM_OF_DISPLAYED_MOVIES_IN_QUICK_SEARCH } from '../../../../utilities/Consts'\r\nimport HighlightTextInQuickSearchHooks from '../Hooks/HighlightTextInQuickSearchHooks'\r\nimport GotoOtherRoutesHooks from '../Hooks/GotoOtherRoutesHooks'\r\nimport no_image from '../../../../images/no_image.png'\r\n\r\n\r\nexport default function MovieSearchbarResults() {\r\n  const { showQuickSearchRes, indexOfHighlightedMovie } = useContext(MovieSearchbarContext)\r\n  const { searchbarText, suggestions, allMoviesData, pushToHistory } = useContext(AppContext)\r\n\r\n  const [highligthText, highlightMovieTextOnHover] = HighlightTextInQuickSearchHooks()\r\n  const [selectedMovieInQuickSearch] = GotoOtherRoutesHooks()\r\n    \r\n\r\n  return (\r\n  <>\r\n    {allMoviesData.length > 0 //if\r\n    ? <ul \r\n        className={'searchbar_ul ' + \r\n        (showQuickSearchRes && searchbarText && 'fadeIn')} \r\n      >\r\n        {suggestions.slice(0, NUM_OF_DISPLAYED_MOVIES_IN_QUICK_SEARCH)\r\n        .map((item, index) => \r\n          <li \r\n            className={'searchbar_li ' + \r\n            (indexOfHighlightedMovie === index && 'active')}\r\n\r\n            onClick={()=> selectedMovieInQuickSearch(item)}\r\n            onMouseEnter={highlightMovieTextOnHover} \r\n            index={index}\r\n            key={index}\r\n          >\r\n            <div className='row'>\r\n              <img \r\n                src={item[2] !== NOT_FOUND_POSTER_W500 ? item[2] : no_image} \r\n                className='col-lg-2 col-md-3 col-sm-4 col-3 quickSearchImage'\r\n                alt='movie poster'\r\n              />\r\n              <p className='col-lg-10 col-md-9 col-sm-8 col-9'>\r\n                {highligthText(item[0], searchbarText, index)}\r\n              </p>\r\n            </div>\r\n          </li>\r\n        )}\r\n        \r\n        <li className={'searchbar_li showMore ' + \r\n          (indexOfHighlightedMovie === NUM_OF_DISPLAYED_MOVIES_IN_QUICK_SEARCH && 'active')}\r\n\r\n          onMouseEnter={highlightMovieTextOnHover} \r\n          onClick={() => pushToHistory(`/`)} \r\n          index={NUM_OF_DISPLAYED_MOVIES_IN_QUICK_SEARCH}\r\n        >\r\n          <p>show more</p>\r\n        </li>\r\n      </ul>\r\n\r\n    : //else\r\n      searchbarText &&\r\n        <ul className='fadeIn searchbar_ul'>\r\n          <li className='searchbar_li showMore noResult'>no result</li>\r\n        </ul>\r\n    }\r\n  </>\r\n  )\r\n}","import { useContext } from 'react'\r\nimport { MovieSearchbarContext } from '../../../Contexts/MovieSearchbarContext'\r\n\r\n\r\nexport default function HighlightTextInQuickSearchHooks() {\r\n  const { indexOfHighlightedMovie, setIndexOfHighlightedMovie } = useContext(MovieSearchbarContext)\r\n\r\n  function highligthText(text, highlight, index) {\r\n    const parts = text.split(new RegExp(`(${highlight})`, 'gi'))\r\n\r\n    return <span> { parts.map((part, i) => \r\n      <span \r\n        key={i} \r\n        style=\r\n        {(part.toLowerCase() === highlight.toLowerCase() && indexOfHighlightedMovie !== index)\r\n          ? { color: '#00FC87', fontWeight: 'bold' } \r\n          : part.toLowerCase() === highlight.toLowerCase() \r\n            ? { fontWeight: 'bold'}\r\n            : {}} \r\n      >\r\n        { part }\r\n      </span>)\r\n    } </span>;\r\n  }\r\n\r\n  const highlightMovieTextOnHover = e => {\r\n    setIndexOfHighlightedMovie(parseInt(e.target.getAttribute('index')))\r\n  }\r\n\r\n  return [highligthText, highlightMovieTextOnHover]\r\n}","export default __webpack_public_path__ + \"static/media/tmdb.6852b1ef.svg\";","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useContext } from 'react'\r\nimport { AppContext } from '../../Contexts/AppContext'\r\nimport '../../../styles/main.scss'\r\nimport ArrowKeysNavigationInQuickSearchHooks from './Hooks/ArrowKeysNavigationInQuickSearchHooks'\r\nimport ShowHideQuickSearchHook from './Hooks/ShowHideQuickSearchHook'\r\nimport GotoOtherRoutesHooks from './Hooks/GotoOtherRoutesHooks'\r\nimport MovieSearchbarResults from './Results/MovieSearchbarResultsPC'\r\nimport TMDBLogo from '../../../images/tmdb.svg'\r\n\r\nexport default function MovieSearch () {\r\n  const { searchbarText, oldSearchbarText, onSearchbarTextChanging } = useContext(AppContext)\r\n  \r\n  const [enterKeyPressedInQuickSearch] = ArrowKeysNavigationInQuickSearchHooks()\r\n  const [node, OnMovieSearchBarClicked] = ShowHideQuickSearchHook()\r\n  const [, gotoStarPage] = GotoOtherRoutesHooks()\r\n\r\n\r\n  return (\r\n    <div className='searchContainer'>\r\n      <div className='row searchSecondContainer'>\r\n        <div className='col-xs-12 col-sm-3 col-lg-3 p-0'>\r\n          <img \r\n            src={TMDBLogo} \r\n            className='logo'\r\n            alt='The Movie Database Logo' \r\n            onClick={gotoStarPage}\r\n          />\r\n        </div>\r\n        \r\n        <div className='col-xs-12 col-sm-9 col-lg-9 p-0 pl-3 searchInside' ref={node}>\r\n          <form className='searchbox' onSubmit={e => e.preventDefault()}>\r\n            <input\r\n              onChange={onSearchbarTextChanging}\r\n              className='movieSearchBar'\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText !== '' ? searchbarText : oldSearchbarText}\r\n              onKeyPress={enterKeyPressedInQuickSearch}\r\n              onClick={OnMovieSearchBarClicked}\r\n            />\r\n          </form>\r\n          <MovieSearchbarResults/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useContext } from 'react'\r\nimport ArrowKeysReact from 'arrow-keys-react'\r\nimport { AppContext } from '../../../Contexts/AppContext'\r\nimport { MovieSearchbarContext } from '../../../Contexts/MovieSearchbarContext'\r\nimport { NUM_OF_DISPLAYED_MOVIES_IN_QUICK_SEARCH } from '../../../../utilities/Consts'\r\nimport GotoOtherRoutesHooks from './GotoOtherRoutesHooks'\r\n\r\nexport default function ArrowKeysNavigationInQuickSearchHooks() {\r\n  const { suggestions, pushToHistory} = useContext(AppContext)\r\n  const { showQuickSearchRes, setShowQuickSearchRes, indexOfHighlightedMovie, setIndexOfHighlightedMovie } = useContext(MovieSearchbarContext)\r\n\r\n  const [selectedMovieInQuickSearch] = GotoOtherRoutesHooks()\r\n  \r\n  \r\n  function enterKeyPressedInQuickSearch(e){\r\n    const code = e.keyCode || e.which\r\n    if (code === 13 /* enter key */) {\r\n      if (!showQuickSearchRes) setShowQuickSearchRes(true)\r\n      if (showQuickSearchRes) {\r\n        if (indexOfHighlightedMovie === NUM_OF_DISPLAYED_MOVIES_IN_QUICK_SEARCH) {\r\n          pushToHistory(`/`)\r\n        } else {\r\n          selectedMovieInQuickSearch(suggestions[indexOfHighlightedMovie])\r\n        }\r\n      } \r\n    }\r\n  }\r\n\r\n  // Up and down arrow keys configuration\r\n  // allows using up and down key to select movie in quick search\r\n  ArrowKeysReact.config({\r\n    up: () => {\r\n      isNaN(indexOfHighlightedMovie)\r\n        ? setIndexOfHighlightedMovie(NUM_OF_DISPLAYED_MOVIES_IN_QUICK_SEARCH)\r\n        : indexOfHighlightedMovie < 0\r\n          ? setIndexOfHighlightedMovie(NUM_OF_DISPLAYED_MOVIES_IN_QUICK_SEARCH)\r\n          : setIndexOfHighlightedMovie(prevState => prevState - 1)\r\n    },\r\n    down: () => {\r\n      isNaN(indexOfHighlightedMovie)\r\n        ? setIndexOfHighlightedMovie(0)\r\n        : indexOfHighlightedMovie > NUM_OF_DISPLAYED_MOVIES_IN_QUICK_SEARCH\r\n          ? setIndexOfHighlightedMovie(0)\r\n          : setIndexOfHighlightedMovie(prevState => prevState + 1)\r\n    }\r\n  })\r\n\r\n\r\n  return [enterKeyPressedInQuickSearch]\r\n}","import { AppContext } from '../../../Contexts/AppContext'\r\nimport { MovieSearchbarContext } from '../../../Contexts/MovieSearchbarContext'\r\nimport { useEffect, useContext, useRef } from 'react'\r\n\r\nexport default function ShowHideQuickSearchHook() {\r\n  const { searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, showResInSearchBar } = useContext(AppContext)\r\n  const { setShowQuickSearchRes } = useContext(MovieSearchbarContext)\r\n  const node = useRef()\r\n\r\n  function hideOnOutsideClick(e) {\r\n    if (!node.current.contains(e.target)){\r\n      setShowQuickSearchRes(false) \r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', hideOnOutsideClick)\r\n    return () => {\r\n      // return function to be called when unmounted\r\n      document.removeEventListener('mousedown', hideOnOutsideClick)\r\n    }\r\n  }, [])\r\n\r\n  const OnMovieSearchBarClicked = async e => {\r\n    setShowQuickSearchRes(true)\r\n    if (searchbarText === '') {\r\n      showResInSearchBar(oldSearchbarText)\r\n      setSearchbarText(oldSearchbarText)\r\n      setOldSearchbarText('')\r\n    }\r\n  }\r\n\r\n  return [node, OnMovieSearchBarClicked]\r\n}","export function nestedDataToString(nestedData) {\r\n  let nestedArray = []\r\n  if (nestedData !== undefined) {\r\n    nestedData.forEach(item => {\r\n      nestedArray.push(item.name)\r\n    })\r\n  }\r\n  // returns string compiled from array\r\n  return nestedArray.join(', ') \r\n}","import { useContext } from 'react'\r\nimport '../../../styles/main.scss'\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { AppContext } from '../../Contexts/AppContext'\r\nimport { POSTER_W500 } from '../../../utilities/Consts'\r\nimport { nestedDataToString } from './MovieCardFunctions'\r\nimport no_image from '../../../images/no_image.png'\r\n\r\n\r\nexport default function Card() {\r\n  const {movieData} = useContext(AppContext)\r\n  const {original_title, overview, tagline, poster_path, production_companies, genres, release_date, runtime } = movieData\r\n  let {revenue, vote_average} = movieData\r\n\r\n  const posterIMG = POSTER_W500 + poster_path,\r\n        productionList = nestedDataToString(production_companies),\r\n        genresList = nestedDataToString(genres)\r\n\r\n  // conditional statements for no data\r\n  if (vote_average === 'undefined' || vote_average === 0) {\r\n    vote_average = '-'\r\n  }\r\n\r\n  // dodaje spacje i $\r\n  if (revenue === 'undefined' || revenue === 0)\r\n    revenue = '-'\r\n  else\r\n    revenue = parseInt(revenue).toLocaleString() + ' $'\r\n\r\n\r\n  return (\r\n    <div className='MovieCard'>\r\n      <AnimatePresence exitBeforeEnter>\r\n      <motion.div \r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1}}\r\n        exit={{ opacity: 0 }}\r\n        transition={{ duration: 1 }}\r\n\r\n        key={original_title} \r\n        className=\"Card row\" \r\n      >      \r\n      <div className='meta-data-container col-12 col-md-7 col-lg-8'>\r\n        <h1>{original_title}</h1>\r\n        <span className=\"tagline\">{tagline}</span>\r\n        <p>{overview}</p>\r\n        <div className=\"additional-details\">\r\n          <span className=\"genre-list\">{genresList}</span>\r\n          <span className=\"production-list\">{productionList}</span>\r\n          <div className=\"row release-details\">\r\n            <div className=\"col-6\"> Original Release: <span className=\"meta-data\">{release_date}</span></div>\r\n            <div className=\"col-6\"> Running Time: <span className=\"meta-data\">{runtime} min</span> </div>\r\n            <div className=\"col-6\"> Box Office: <span className=\"meta-data\">{revenue}</span></div>\r\n            <div className=\"col-6\"> Vote Average: <span className=\"meta-data\">{vote_average}</span></div>\r\n          </div>\r\n        </div> \r\n      </div>\r\n\r\n      <div className=\"posterContainer order-md-first col-12 col-md-5 col-lg-4\">\r\n        <img \r\n          className='poster' \r\n          src={poster_path !== null ? posterIMG : no_image}\r\n          alt='poster'\r\n        />\r\n      </div>\r\n    </motion.div >\r\n    </AnimatePresence>\r\n  </div>\r\n  )\r\n}","import { useState } from 'react'\r\nimport { MovieSearchbarContext } from '../Contexts/MovieSearchbarContext'\r\nimport MovieSearch from './MovieSearchbar/MovieSearchbar'\r\nimport MovieCard from './MovieCard/MovieCard'\r\nimport { motion } from \"framer-motion\"\r\n\r\n\r\nexport default function Movie() {\r\n  const [showQuickSearchRes, setShowQuickSearchRes] = useState(false)\r\n  const [indexOfHighlightedMovie, setIndexOfHighlightedMovie] = useState()\r\n\r\n  return (\r\n    <MovieSearchbarContext.Provider value={{ showQuickSearchRes, setShowQuickSearchRes, indexOfHighlightedMovie, setIndexOfHighlightedMovie}}>\r\n      <motion.div \r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1}}\r\n        exit={{ opacity: 0 }}\r\n        transition={{ duration: 1 }}\r\n      >    \r\n        <MovieSearch /> \r\n        <MovieCard />\r\n      </motion.div>\r\n    </MovieSearchbarContext.Provider>\r\n  )\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react'\r\nimport './styles/main.scss'\r\nimport { Route, Switch, useLocation, useHistory } from 'react-router-dom'\r\nimport { AnimatePresence } from \"framer-motion\"\r\nimport { AppContext } from './AppFiles/Contexts/AppContext'\r\nimport AppScroolbar from './utilities/Scroolbar/AppScrollbar'\r\nimport { getMoviesDataToDisplayInSearch, getAllMoviesData, getMovieData, createSearchMoviesUrl, setInitMovieID } from './utilities/FetchFunctions'\r\nimport { POPULAR_MOVIES_URL } from './utilities/Consts'\r\nimport { getCurrentPageUrl, getMovieIdFromLocationPathname } from './utilities/RoutesFunctions'\r\nimport CalculateWindowHeightHook from './utilities/CalculateWindowHeightHook'\r\nimport ArrowKeysReact from 'arrow-keys-react'\r\nimport AppBackground from './AppFiles/AppBackground'\r\nimport StartPage from './AppFiles/StartPage/StartPage'\r\nimport MoviePage from './AppFiles/Movie/MoviePage'\r\n\r\n\r\nexport default function App () {\r\n  const location = useLocation()  // key to app routes\r\n  const history = useHistory()\r\n  const pushToHistory = url => history.push(url)\r\n\r\n\r\n// ==== Fetch StartPage ====\r\n  const [backgroundIMG, setBackgroundIMG] = useState()\r\n  const [suggestions, setSuggestions] = useState([])\r\n  const [searchbarText, setSearchbarText] = useState('')\r\n\r\n  async function fetchPopularMoviesOnStartPage() {\r\n    setSuggestions(await getMoviesDataToDisplayInSearch(POPULAR_MOVIES_URL))\r\n  }\r\n\r\n  // if search is empty on main page it displays popular movies\r\n  // loads at page starup because searchbarText === '' at start\r\n  // checks this condition every time\r\n  useEffect(() => {\r\n    if(searchbarText === '') fetchPopularMoviesOnStartPage()\r\n  }, [searchbarText])\r\n// ==== END Fetch StartPage ====\r\n\r\n\r\n// ==== Fetch movie page based on movieID parameter ====\r\n  const [movieID, setMovieID] = useState(setInitMovieID(location))\r\n  const [movieData, setMovieData] = useState({})\r\n  \r\n  useEffect(async () => {\r\n    setMovieData(await getMovieData(movieID))\r\n  }, [movieID])\r\n\r\n  // implements back button in browser\r\n  // allows to go back to previous movie on moviePage\r\n  useEffect(() => {\r\n    setMovieID(getMovieIdFromLocationPathname(location))\r\n  }, [location.pathname])\r\n  \r\n// ==== END Fetch movie page ====\r\n\r\n\r\n\r\n// ==== Search state and functions ====\r\n  const [allMoviesData, setAllMoviesData] = useState([])\r\n  const [oldSearchbarText, setOldSearchbarText] = useState('')\r\n\r\n\r\n  const onSearchbarTextChanging = e => {\r\n    const value = e.target.value.replace(/[^\\w\\s]/gi, '')\r\n    setSearchbarText(value)\r\n    showResInSearchBar(value)\r\n  }\r\n\r\n  const showResInSearchBar = async (value) => {\r\n    if (value.length === 0) setOldSearchbarText('')\r\n    if (value.length >= 1) {\r\n      const allMoviesData = await getAllMoviesData(createSearchMoviesUrl(value))\r\n      const dataToDisplay = await getMoviesDataToDisplayInSearch(allMoviesData)\r\n\r\n      setAllMoviesData(allMoviesData)\r\n      setSuggestions(dataToDisplay)\r\n      setOldSearchbarText(value)\r\n    }\r\n  }\r\n\r\n  \r\n// ==== END Search state and functions ====\r\n\r\n\r\n// ==== Console log stuff ====\r\n  useEffect(() => {\r\n    console.log(`allMoviesData.length ${allMoviesData.length}`)\r\n    console.log(`suggestions.length ${allMoviesData.length}`)\r\n  }, [allMoviesData])\r\n\r\n  useEffect(() => {\r\n    console.log({suggestions})\r\n  }, [suggestions])\r\n\r\n  useEffect(() => {\r\n    console.log({movieData})\r\n    setBackgroundIMG(`https://image.tmdb.org/t/p/original${movieData.backdrop_path}`)\r\n  }, [movieData])\r\n\r\n  useEffect(() => {\r\n    console.log(`searchbarText: ${searchbarText}`)\r\n  }, [searchbarText])\r\n\r\n  useEffect(() => {\r\n    console.log(`backgroundIMG: ${backgroundIMG}`)\r\n  }, [backgroundIMG])\r\n\r\n// ==== END Console log stuff ====\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CalculateWindowHeightHook/>\r\n      <AppBackground backgroundIMG={backgroundIMG}/>\r\n\r\n      <div\r\n        id='app'\r\n        {...ArrowKeysReact.events}\r\n        tabIndex='1'\r\n      >\r\n        <AppContext.Provider \r\n          value={{movieID, movieData, searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, suggestions, setSuggestions,  onSearchbarTextChanging, allMoviesData, setAllMoviesData, setMovieID, fetchPopularMoviesOnStartPage, showResInSearchBar, history, pushToHistory}}\r\n        >\r\n          <AppScroolbar>\r\n            <AnimatePresence exitBeforeEnter>\r\n              <Switch \r\n                location={location} \r\n                key={getCurrentPageUrl(location)}\r\n              >\r\n                <Route exact path='/' render={() => <StartPage/>} />\r\n                <Route exact path={`/movie/:${movieID}`} render={() => <MoviePage/>} />\r\n              </Switch>\r\n            </AnimatePresence>\r\n          </AppScroolbar>\r\n        </AppContext.Provider>\r\n      </div>\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './testingFiles/serviceWorker'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}