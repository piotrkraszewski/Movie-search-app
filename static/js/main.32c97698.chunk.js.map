{"version":3,"sources":["AppFiles/AppContext.js","utilities/Scroolbar/AppScrollbar.js","utilities/Consts.js","utilities/FetchFunctions.js","utilities/RoutesFunctions.js","images/no_image.png","AppFiles/StartPageCard.js","AppFiles/StartPageSearchbar.js","AppFiles/StartPage.js","AppFiles/Movie/MovieSearchbarFunctions.js","images/tmdb.svg","AppFiles/Movie/MovieSearchbar.js","AppFiles/Movie/MovieCardFunctions.js","AppFiles/Movie/MovieCard.js","AppFiles/Movie/Movie.js","images/BgGreen2.jpg","App.js","testingFiles/serviceWorker.js","index.js"],"names":["AppContext","createContext","AppScrollbar","props","isMobile","className","children","API_KEY","BASE_API_URL","BASE_IMG_URL","POSTER_W500","NOT_FOUND_POSTER_W500","NOT_FOUND_BG_IMG","POPULAR_MOVIES_URL","getMoviesDataToDisplayInSearch","input","a","getAllMoviesData","allMoviesData","console","error","map","movie","original_title","id","poster_path","url","axios","get","response","data","results","createSearchMoviesUrl","value","getMovieData","movieID","getCurrentPageUrl","location","pathname","substring","lastIndexOf","FullscreenSearch","useContext","searchbarText","suggestions","setMovieID","item","index","to","onClick","src","no_image","alt","StartPageSearch","oldSearchbarText","handleChange","handleClickOnInput","useState","changeStyle","setChangeStyle","useScrollPosition","prevPos","currPos","y","onSubmit","e","preventDefault","onChange","type","placeholder","StartPage","div","initial","opacity","animate","exit","transition","duration","highligthText","text","highlight","cursor","parts","split","RegExp","part","i","style","toLowerCase","color","fontWeight","MovieSearch","setCursor","show","setShow","node","suggestionsSelected","handleClickOnMovieSearchBar","setSearchbarText","setOldSearchbarText","setAllMoviesData","fetchPopularMoviesOnStartPage","ArrowKeysReact","config","up","isNaN","prevState","down","history","useHistory","showMore","push","highlightMovieTextOnHover","parseInt","target","getAttribute","TMDBLogo","ref","onKeyPress","sliceNumber","keyCode","which","length","slice","onMouseEnter","nestedDataToString","nestedData","nestedArray","undefined","forEach","name","join","Card","movieData","overview","tagline","production_companies","genres","release_date","runtime","revenue","vote_average","posterIMG","productionList","genresList","toLocaleString","exitBeforeEnter","Movie","showResInSearchBar","useRef","hideOnOutsideClick","current","contains","useEffect","document","addEventListener","removeEventListener","App","useLocation","backgroundIMG","setBackgroundIMG","setSuggestions","getInitialMovieID","setMovieData","dataToDisplay","log","backdrop_path","events","tabIndex","Provider","replace","exact","path","render","img","BgGreen2","Boolean","window","hostname","match","ReactDOM","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.32c97698.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nexport const AppContext = createContext(null)","import ScrollBar from 'react-perfect-scrollbar'\r\nimport { isMobile } from \"react-device-detect\";\r\nimport './ScroolbarStyle.scss'\r\n\r\nexport default function AppScrollbar (props) {\r\n  // displays perfect scrollbar if not on mobile because I couldn't add refresh gesture on mobile\r\n  // https://github.com/goldenyz/react-perfect-scrollbar/issues/101\r\n  return (\r\n    isMobile ? (\r\n      <div className=\"overflow-y-auto\">\r\n        {props.children}\r\n      </div>\r\n    ) : (\r\n      <ScrollBar className='AppScroolbar'>\r\n        {props.children}\r\n      </ScrollBar>\r\n  ))\r\n}","export const API_KEY = 'api_key=cfe422613b250f702980a3bbf9e90716'\r\nexport const BASE_API_URL = 'https://api.themoviedb.org'\r\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/'\r\nexport const INIT_BG_IMG = 'https://image.tmdb.org/t/p/original/rAiYTfKGqDCRIIqo664sY9XZIvQ.jpg' // interstellar\r\n\r\nexport const POSTER_W500 = `${BASE_IMG_URL}w500`\r\nexport const NOT_FOUND_POSTER_W500 = `${POSTER_W500}null`\r\nexport const NOT_FOUND_BG_IMG = `${BASE_IMG_URL}originalnull`\r\n\r\n\r\nexport const POPULAR_MOVIES_URL = `${BASE_API_URL}/3/movie/popular?${API_KEY}` ","import axios from 'axios'\r\nimport { API_KEY, BASE_API_URL, POSTER_W500 } from './Consts'\r\n\r\n\r\n//==== Fetch all movies ====\r\nexport async function getMoviesDataToDisplayInSearch(input){\r\n  let allMoviesData\r\n  if (typeof input === 'string'){  // if url\r\n    allMoviesData = await getAllMoviesData(input)\r\n  } else if (typeof input === 'object'){\r\n    allMoviesData = input\r\n  } else {\r\n    console.error(`Passed ${typeof input} input to getMoviesDataToDisplayInSearch. You must pass string or object`)\r\n    return \r\n  }\r\n\r\n  return allMoviesData.map(movie => [\r\n    movie.original_title,\r\n    movie.id,\r\n    POSTER_W500 + movie.poster_path\r\n  ])\r\n}\r\n\r\nexport async function getAllMoviesData(url){\r\n  const response = await axios.get(url)\r\n  return response.data.results\r\n}\r\n\r\nexport function createSearchMoviesUrl(value){\r\n  return `${BASE_API_URL}/3/search/movie?query=%${value}&${API_KEY}`\r\n}\r\n\r\n//==== Fetch one movie ====\r\nexport async function getMovieData(movieID){\r\n  const response = await axios.get(`${BASE_API_URL}/3/movie/${movieID}?&${API_KEY}`)\r\n  return response.data\r\n}","export const getCurrentPageUrl = location => (\r\n  location.pathname.substring(0, location.pathname.lastIndexOf(\"/\") + 1)\r\n)\r\n\r\nexport const getInitialMovieID = location => (\r\n  location.pathname.substring(location.pathname.lastIndexOf(\"/\") + 1)\r\n)","export default __webpack_public_path__ + \"static/media/no_image.2f8a70e1.png\";","import { useContext } from 'react'\r\nimport '../styles/main.scss'\r\nimport { Link } from 'react-router-dom'\r\nimport { AppContext } from './AppContext'\r\nimport { NOT_FOUND_POSTER_W500 } from '../utilities/Consts'\r\nimport no_image from '../images/no_image.png'\r\n\r\n\r\nexport default function FullscreenSearch() {\r\n  const {searchbarText, suggestions, setMovieID} = useContext(AppContext)\r\n\r\n  const suggestionsSelectedFullscreen = value => {\r\n    setMovieID(value[1])\r\n  }\r\n\r\n  return (\r\n    <div className='StartPageCardTransition'>\r\n\r\n    <div className='StartPageCard'>\r\n      <p className='Popular'>{searchbarText === '' || searchbarText === null ? 'Trending Now' : ''}</p>\r\n      <div className='row'>\r\n        {suggestions.map((item, index) => \r\n          <div className='cardContainer col-xl-2 col-md-3 col-4' key={index}>\r\n            <Link to={`/movie/${item[1]}`} className='linkStyle'>\r\n              <div className='cardFS' onClick={() => suggestionsSelectedFullscreen(item)}>\r\n                <img \r\n                  className='posterImage' \r\n                  src={item[2] !== NOT_FOUND_POSTER_W500 ? item[2] : no_image}\r\n                  alt='movie poster'\r\n                />\r\n                <h1 className='FS-title'>{item[0]}</h1>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n  )\r\n}","import { useState, useContext } from 'react'\r\nimport '../styles/main.scss'\r\nimport { useScrollPosition } from '@n8tb1t/use-scroll-position'\r\nimport { AppContext } from './AppContext'\r\n\r\nexport default function StartPageSearch() {\r\n  const {searchbarText, oldSearchbarText, handleChange, handleClickOnInput} = useContext(AppContext)\r\n\r\n  const [changeStyle, setChangeStyle] = useState(false)\r\n  useScrollPosition(({ prevPos, currPos }) => {\r\n    (currPos.y < -20) ? setChangeStyle(true) : setChangeStyle(false)    // is it implelented i scss?\r\n    // console.log(changeStyle, currPos.y)\r\n  })\r\n\r\n  return (\r\n    <div className={'col-lg-6 col-md-8 col-sm-9 col-12 st-search ' + (changeStyle && 'st-animation')}>\r\n      <div className='row'>\r\n        <div className='col-12' >\r\n          <form onSubmit={e => { e.preventDefault()}}>\r\n            <input\r\n              onChange={handleChange}\r\n              className={'myForm1 ' + (changeStyle && 'myForm-animation')}\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText !== '' ? searchbarText : oldSearchbarText}\r\n              onClick={handleClickOnInput}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import StartPageCard from './StartPageCard'\r\nimport StartPageSearch from './StartPageSearchbar'\r\nimport { motion } from \"framer-motion\"\r\n\r\nexport default function StartPage() {\r\n  return (\r\n    <motion.div \r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1}}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 1 }}\r\n    > \r\n      <StartPageSearch />\r\n      <StartPageCard />\r\n    </motion.div> \r\n  )\r\n}","\r\n\r\nexport function highligthText(text, highlight, index, cursor) {\r\n  const parts = text.split(new RegExp(`(${highlight})`, 'gi'))\r\n\r\n  return <span> { parts.map((part, i) => \r\n    <span \r\n      key={i} \r\n      style=\r\n      {(part.toLowerCase() === highlight.toLowerCase() && cursor !== index)\r\n        ? { color: '#00FC87', fontWeight: 'bold' } \r\n        : part.toLowerCase() === highlight.toLowerCase() \r\n          ? { fontWeight: 'bold'}\r\n          : {}} \r\n    >\r\n      { part }\r\n    </span>)\r\n  } </span>;\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/tmdb.6852b1ef.svg\";","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useContext } from 'react'\r\nimport ArrowKeysReact from 'arrow-keys-react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { AppContext } from '../AppContext'\r\nimport '../../styles/main.scss'\r\nimport { NOT_FOUND_POSTER_W500 } from '../../utilities/Consts'\r\nimport { highligthText } from './MovieSearchbarFunctions'\r\nimport TMDBLogo from '../../images/tmdb.svg'\r\nimport no_image from '../../images/no_image.png'\r\n\r\n\r\nexport default function MovieSearch (props) {\r\n  const [cursor, setCursor] = useState()\r\n\r\n  const {show, setShow, node, suggestionsSelected,  handleClickOnMovieSearchBar} = props\r\n\r\n  const {searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, suggestions, allMoviesData,  setAllMoviesData, handleChange, fetchPopularMoviesOnStartPage} = useContext(AppContext)\r\n\r\n  const sliceNumber = 5\r\n\r\n  const gotoStarPage = () => {\r\n    setAllMoviesData([])\r\n    setSearchbarText('')\r\n    fetchPopularMoviesOnStartPage()\r\n    showMore()\r\n  }\r\n\r\n\r\n    // ==== Search arrow up and down logic ====\r\n    \r\n    ArrowKeysReact.config({\r\n      up: () => {\r\n        isNaN(cursor)\r\n          ? setCursor(sliceNumber)\r\n          : cursor < 0\r\n          ? setCursor(sliceNumber)\r\n          : setCursor(prevState => prevState - 1)\r\n      },\r\n      down: () => {\r\n        isNaN(cursor)\r\n          ? setCursor(0)\r\n          : cursor > sliceNumber\r\n          ? setCursor(0)\r\n          : setCursor(prevState => prevState + 1)\r\n      }\r\n    })\r\n  \r\n    const enterPressed = (e, show, sliceNumber) => {\r\n      const code = e.keyCode || e.which\r\n      if (code === 13) {\r\n        // enter key\r\n        // zmienna kursor kt�ra �ledzi kt�ry li jest pod�wietlony daje nam indeks za pomoc� kt�rego mo�emy uzyska� id filmu z oryginalnej tablicy\r\n        // dodanie pojawienie paska po wcisnieciu enter\r\n        if (show) {\r\n          if (cursor === sliceNumber) {\r\n            showMore()\r\n          } else {\r\n            suggestionsSelected(suggestions[cursor])\r\n            setShow(false)\r\n            setSearchbarText(oldSearchbarText)\r\n          }\r\n        } else {\r\n          if (cursor === sliceNumber) {\r\n            showMore()\r\n          } else {\r\n            setSearchbarText(oldSearchbarText)\r\n            setOldSearchbarText('')\r\n          }\r\n          setShow(true)\r\n        }\r\n      }\r\n    } // ==== END Search arrow up and down logic ====\r\n\r\n\r\n\r\n  // *** show more button ***\r\n  const history = useHistory()\r\n  const showMore = e => history.push(`/`)\r\n  \r\n\r\n\r\n// ==== Pod�wietlenie tekstu ====\r\nconst highlightMovieTextOnHover = e => {\r\n  setCursor(parseInt(e.target.getAttribute('index')))\r\n}\r\n// ==== END Pod�wietlenie tekstu ====\r\n\r\n\r\nconst renderSugestions = () => {\r\n  if (allMoviesData.length > 0) {\r\n    return (\r\n      <ul \r\n        className={(show && searchbarText) ? 'animate list' : 'list'} \r\n      >\r\n      {suggestions.slice(0, sliceNumber).map((item, index) => \r\n      <Link to={`/movie/${item[1]}`} className='linkStyle'>\r\n        <li \r\n          className={cursor === index ? 'active tt-suggestion' : 'tt-suggestion'}\r\n          onClick={()=> suggestionsSelected(item)}\r\n          onMouseEnter={highlightMovieTextOnHover} \r\n          index={index}\r\n          key={index}\r\n        >\r\n          <div className='row'>\r\n            <img \r\n              src={item[2] !== NOT_FOUND_POSTER_W500 ? item[2] : no_image} \r\n              className='col-lg-2 col-md-3 col-sm-4 col-3 quickSearchImage'\r\n              alt='movie poster'\r\n            />\r\n            <p \r\n              className='col-lg-10 col-md-9 col-sm-8 col-9 textSugestion sugest'>\r\n              {highligthText(item[0], searchbarText, index, cursor)}\r\n            </p>\r\n          </div>\r\n        </li>\r\n      </Link>)}\r\n        \r\n        <li>\r\n          <p \r\n            onClick={showMore} \r\n            index={sliceNumber}\r\n            className={cursor === sliceNumber \r\n            ? 'active textSugestion showMore tt-suggestion' \r\n            : 'textSugestion showMore tt-suggestion'}\r\n          >\r\n            show more\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    )\r\n  } else {\r\n    if (searchbarText) {\r\n      return (\r\n        <ul className='animate list showMore noResult'>\r\n          <li>no result</li>\r\n        </ul>\r\n      )\r\n    } \r\n  }\r\n}\r\n\r\n  return (\r\n    <div className='searchContainer'>\r\n      <div className='row searchSecondContainer'>\r\n        <div className='col-xs-12 col-sm-3 col-lg-3 p-0'>\r\n          <img \r\n            src={TMDBLogo} \r\n            className='logo'\r\n            alt='The Movie Database' \r\n            onClick={gotoStarPage}\r\n          />\r\n        </div>\r\n        \r\n        <div className='col-xs-12 col-sm-9 col-lg-9 p-0 pl-3 searchInside' ref={node}>\r\n          <form className='searchbox' onSubmit={e => e.preventDefault()}>\r\n            <input\r\n              onChange={handleChange}\r\n              className='movieSearchBar'\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText !== '' ? searchbarText : oldSearchbarText}\r\n              onKeyPress={enterPressed}\r\n              onClick={handleClickOnMovieSearchBar}\r\n            />\r\n          </form>\r\n          {renderSugestions()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","export function nestedDataToString(nestedData) {\r\n  let nestedArray = []\r\n  if (nestedData !== undefined) {\r\n    nestedData.forEach(item => {\r\n      nestedArray.push(item.name)\r\n    })\r\n  }\r\n  // returns string compiled from array\r\n  return nestedArray.join(', ') \r\n}","import { useContext } from 'react'\r\nimport '../../styles/main.scss'\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { AppContext } from '../AppContext'\r\nimport { POSTER_W500 } from '../../utilities/Consts'\r\nimport { nestedDataToString } from './MovieCardFunctions'\r\nimport no_image from '../../images/no_image.png'\r\n\r\n\r\nexport default function Card() {\r\n  const {movieData} = useContext(AppContext)\r\n  const {original_title, overview, tagline, poster_path, production_companies, genres, release_date, runtime } = movieData\r\n  let {revenue, vote_average} = movieData\r\n\r\n  const posterIMG = POSTER_W500 + poster_path,\r\n        productionList = nestedDataToString(production_companies),\r\n        genresList = nestedDataToString(genres)\r\n\r\n  // conditional statements for no data\r\n  if (vote_average === 'undefined' || vote_average === 0) {\r\n    vote_average = '-'\r\n  }\r\n\r\n  // dodaje spacje i $\r\n  if (revenue === 'undefined' || revenue === 0)\r\n    revenue = '-'\r\n  else\r\n    revenue = parseInt(revenue).toLocaleString() + ' $'\r\n\r\n\r\n  return (\r\n    <div className='MovieCard'>\r\n      <AnimatePresence exitBeforeEnter>\r\n      <motion.div \r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1}}\r\n        exit={{ opacity: 0 }}\r\n        transition={{ duration: 1 }}\r\n\r\n        key={original_title} \r\n        className=\"Card nopadding row\" \r\n      >      \r\n      <div className='meta-data-container col-12 col-md-7 col-lg-8'>\r\n        <h1>{original_title}</h1>\r\n        <span className=\"tagline\">{tagline}</span>\r\n        <p>{overview}</p>\r\n        <div className=\"additional-details\">\r\n          <span className=\"genre-list\">{genresList}</span>\r\n          <span className=\"production-list\">{productionList}</span>\r\n          <div className=\"row nopadding release-details\">\r\n            <div className=\"col-6\"> Original Release: <span className=\"meta-data\">{release_date}</span></div>\r\n            <div className=\"col-6\"> Running Time: <span className=\"meta-data\">{runtime} min</span> </div>\r\n            <div className=\"col-6\"> Box Office: <span className=\"meta-data\">{revenue}</span></div>\r\n            <div className=\"col-6\"> Vote Average: <span className=\"meta-data\">{vote_average}</span></div>\r\n          </div>\r\n        </div> \r\n      </div>\r\n\r\n      <div className=\"poster-container nopadding order-md-first col-12 col-md-5 col-lg-4\">\r\n        <img \r\n          className='poster' \r\n          src={poster_path !== null ? posterIMG : no_image}\r\n          alt='poster'\r\n        />\r\n      </div>\r\n    </motion.div >\r\n    </AnimatePresence>\r\n  </div>\r\n  )\r\n}","import { useState, useEffect, useRef, useContext } from 'react'\r\nimport MovieSearch from './MovieSearchbar'\r\nimport MovieCard from './MovieCard'\r\nimport { AppContext } from '../AppContext'\r\nimport { motion } from \"framer-motion\"\r\n\r\n\r\nexport default function Movie() {\r\n  const {searchbarText, setSearchbarText, setOldSearchbarText, setMovieID, showResInSearchBar, oldSearchbarText} = useContext(AppContext)\r\n\r\n\r\n  const suggestionsSelected = value => {\r\n    if (searchbarText && value !== undefined) {\r\n      setOldSearchbarText(searchbarText)\r\n      setSearchbarText('')\r\n      setMovieID(value[1])\r\n    }\r\n  }\r\n\r\n// ==== sugeston show and hide on click  ====\r\n  const [show, setShow] = useState(false)\r\n  const node = useRef()\r\n\r\n  const hideOnOutsideClick = e => {\r\n    if (!node.current.contains(e.target)){// outside click\r\n      setShow(false) \r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', hideOnOutsideClick)\r\n    return () => {\r\n      // return function to be called when unmounted\r\n      document.removeEventListener('mousedown', hideOnOutsideClick)\r\n    }\r\n  }, [])\r\n\r\n  \r\n\r\n  const handleClickOnMovieSearchBar = async e => {\r\n    setShow(true)\r\n    if (searchbarText === '') {\r\n      showResInSearchBar(oldSearchbarText)\r\n      setSearchbarText(oldSearchbarText)\r\n      setOldSearchbarText('')\r\n    }\r\n  }\r\n  // ==== END sugeston show and hide on click ====\r\n\r\n  return (\r\n    <motion.div \r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1}}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 1 }}\r\n    >    \r\n      <MovieSearch {...{show, setShow, suggestionsSelected, node,  handleClickOnMovieSearchBar}}/> \r\n      <MovieCard/>\r\n    </motion.div>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/BgGreen2.a17d9a1b.jpg\";","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react'\r\nimport './styles/main.scss'\r\nimport { Route, Switch, useLocation } from 'react-router-dom'\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\nimport { AppContext } from './AppFiles/AppContext'\r\nimport AppScroolbar from './utilities/Scroolbar/AppScrollbar'\r\nimport { getMoviesDataToDisplayInSearch, getAllMoviesData, getMovieData, createSearchMoviesUrl } from './utilities/FetchFunctions'\r\nimport { INIT_BG_IMG, POPULAR_MOVIES_URL, NOT_FOUND_BG_IMG } from './utilities/Consts'\r\nimport { getCurrentPageUrl, getInitialMovieID } from './utilities/RoutesFunctions'\r\nimport ArrowKeysReact from 'arrow-keys-react'\r\nimport StartPage from './AppFiles/StartPage'\r\nimport Movie from './AppFiles/Movie/Movie'\r\nimport BgGreen2 from './images/BgGreen2.jpg'\r\n\r\n\r\nexport default function App () {\r\n  const location = useLocation()  // key to app routes\r\n\r\n// ==== Fetch StartPage ====\r\n  const [backgroundIMG, setBackgroundIMG] = useState(INIT_BG_IMG)\r\n  const [suggestions, setSuggestions] = useState([])\r\n  const [searchbarText, setSearchbarText] = useState('')\r\n\r\n  async function fetchPopularMoviesOnStartPage() {\r\n    setSuggestions(await getMoviesDataToDisplayInSearch(POPULAR_MOVIES_URL))\r\n  }\r\n\r\n  // if search is empty on main page it displays popular movies\r\n  // loads at page starup because searchbarText === '' at start\r\n  // checks this condition every time\r\n  useEffect(() => {\r\n    if(searchbarText === '') fetchPopularMoviesOnStartPage()\r\n  }, [searchbarText])\r\n// ==== END Fetch StartPage ====\r\n\r\n\r\n// ==== Fetch movie page based on movieID parameter ====\r\n  const [movieID, setMovieID] = useState(getInitialMovieID(location))\r\n  const [movieData, setMovieData] = useState({})\r\n  \r\n  useEffect(async () => {\r\n    setMovieData(await getMovieData(movieID))\r\n  }, [movieID])\r\n// ==== END Fetch movie page ====\r\n\r\n\r\n\r\n// ==== Search state and functions ====\r\n  // queryData - all data that we get from API\r\n  const [allMoviesData, setAllMoviesData] = useState([])\r\n  const [oldSearchbarText, setOldSearchbarText] = useState('')\r\n\r\n\r\n  const handleChange = e => {\r\n    const value = e.target.value.replace(/[^\\w\\s]/gi, '')\r\n    setSearchbarText(value)\r\n    showResInSearchBar(value)\r\n  }\r\n\r\n  const showResInSearchBar = async (value) => {\r\n    if (value.length === 0) setOldSearchbarText('')\r\n    if (value.length >= 1) {\r\n      const allMoviesData = await getAllMoviesData(createSearchMoviesUrl(value))\r\n      const dataToDisplay = await getMoviesDataToDisplayInSearch(allMoviesData)\r\n\r\n      setAllMoviesData(allMoviesData)\r\n      setSuggestions(dataToDisplay)\r\n      setOldSearchbarText(value)\r\n    }\r\n  }\r\n\r\n  \r\n// ==== END Search state and functions ====\r\n\r\n\r\n\r\n// ==== Console log stuff ====\r\n  useEffect(() => {\r\n    console.log(`allMoviesData.length ${allMoviesData.length}`)\r\n    console.log(`suggestions.length ${allMoviesData.length}`)\r\n  }, [allMoviesData])\r\n\r\n  useEffect(() => {\r\n    console.log({suggestions})\r\n  }, [suggestions])\r\n\r\n  useEffect(() => {\r\n    console.log({movieData})\r\n    setBackgroundIMG(`https://image.tmdb.org/t/p/original${movieData.backdrop_path}`)\r\n  }, [movieData])\r\n\r\n  useEffect(() => {\r\n    console.log(`searchbarText: ${searchbarText}`)\r\n  }, [searchbarText])\r\n\r\n  useEffect(() => {\r\n    console.log(`backgroundIMG: ${backgroundIMG}`)\r\n  }, [backgroundIMG])\r\n\r\n// ==== END Console log stuff ====\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        id='app'\r\n        {...ArrowKeysReact.events}\r\n        tabIndex='1'\r\n      >\r\n        <AppContext.Provider \r\n          value={{movieID, movieData, searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, suggestions, setSuggestions, handleChange, allMoviesData, setAllMoviesData, setMovieID, fetchPopularMoviesOnStartPage, showResInSearchBar}}\r\n        >\r\n          <AppScroolbar>\r\n            <AnimatePresence exitBeforeEnter>\r\n              <Switch \r\n                location={location} \r\n                key={getCurrentPageUrl(location)}\r\n              >\r\n                <Route exact path='/' render={() => <StartPage/>} />\r\n                <Route exact path={`/movie/:${movieID}`} render={() => <Movie/>} />\r\n              </Switch>\r\n            </AnimatePresence>\r\n          </AppScroolbar>\r\n        </AppContext.Provider>\r\n      </div>\r\n\r\n      <div className='BgGradient'/>\r\n      <AnimatePresence >\r\n        <motion.img \r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          exit={{ opacity: 0 }}\r\n          transition={{duration: 1.5}}\r\n          src={backgroundIMG !== NOT_FOUND_BG_IMG ? backgroundIMG : BgGreen2}\r\n          key={backgroundIMG}\r\n          className='BgImage'\r\n        />\r\n      </AnimatePresence>\r\n\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './testingFiles/serviceWorker'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}