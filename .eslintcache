[{"C:\\A_Programowanie\\My-Movie-Search\\src\\index.js":"1","C:\\A_Programowanie\\My-Movie-Search\\src\\App.js":"2","C:\\A_Programowanie\\My-Movie-Search\\src\\serviceWorker.js":"3","C:\\A_Programowanie\\My-Movie-Search\\src\\Movie.js":"4","C:\\A_Programowanie\\My-Movie-Search\\src\\StartPage.js":"5","C:\\A_Programowanie\\My-Movie-Search\\src\\MovieSearch.js":"6","C:\\A_Programowanie\\My-Movie-Search\\src\\MovieCard.js":"7","C:\\A_Programowanie\\My-Movie-Search\\src\\StartPageSearch.js":"8","C:\\A_Programowanie\\My-Movie-Search\\src\\StartPageCard.js":"9","C:\\A_Programowanie\\My-Movie-Search\\src\\Scroolbar\\Scroolbar.js":"10"},{"size":631,"mtime":1612353286160,"results":"11","hashOfConfig":"12"},{"size":6091,"mtime":1612368642271,"results":"13","hashOfConfig":"12"},{"size":5227,"mtime":1612353286160,"results":"14","hashOfConfig":"12"},{"size":1557,"mtime":1612353286141,"results":"15","hashOfConfig":"12"},{"size":622,"mtime":1612353286144,"results":"16","hashOfConfig":"12"},{"size":6164,"mtime":1612353286142,"results":"17","hashOfConfig":"12"},{"size":3054,"mtime":1612353286142,"results":"18","hashOfConfig":"12"},{"size":1138,"mtime":1612353286144,"results":"19","hashOfConfig":"12"},{"size":1301,"mtime":1612353286144,"results":"20","hashOfConfig":"12"},{"size":516,"mtime":1612353286143,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"16ldimc",{"filePath":"25","messages":"26","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\A_Programowanie\\My-Movie-Search\\src\\index.js",[],["49","50"],"C:\\A_Programowanie\\My-Movie-Search\\src\\App.js",["51","52","53","54","55","56","57","58","59"],"import React, { useState, useEffect } from 'react'\r\nimport StartPage from './StartPage';\r\nimport Movie from './Movie';\r\nimport axios from 'axios'\r\nimport './styles/main.scss'\r\nimport ArrowKeysReact from 'arrow-keys-react'\r\nimport {Route} from 'react-router-dom'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\n\r\n\r\nexport default function App () {\r\n  // ==== Fetch StartPage ====\r\n  const [startPageSuggestions, setStartPageSuggestions] = useState([])\r\n  const [suggestions, setSuggestions] = useState([])\r\n  const [searchbarText, setSearchbarText] = useState(null)\r\n  let startPageUrl = `https://api.themoviedb.org/3/movie/popular?api_key=cfe422613b250f702980a3bbf9e90716&language=en-US&page=1`\r\n  \r\n  async function fetchStartPage() {\r\n    const response = await axios.get(startPageUrl)\r\n    const res = response.data.results\r\n    let movies = res.map(a => [\r\n      a.original_title,\r\n      a.id,\r\n      `https://image.tmdb.org/t/p/w500${a.poster_path}`,\r\n    ])\r\n    setSuggestions(movies)\r\n  }\r\n\r\n  // Fetch StarPage on app lunch\r\n  useEffect(() => {\r\n    fetchStartPage() \r\n  }, [])\r\n  \r\n  // if search is empty on main page it displays start page\r\n  // checks this condition every time\r\n  useEffect(() => {\r\n    if(searchbarText === '' ){fetchStartPage()}\r\n  })\r\n  // ==== END Fetch StartPage ====\r\n\r\n\r\n  // ==== Fetch movie page based on movieID parameter ====\r\n  const [movieID, setMovieID] = useState(157336)\r\n  const [movieData, setMovieData] = useState({})\r\n  const movieUrl = `https://api.themoviedb.org/3/movie/${movieID}?&api_key=cfe422613b250f702980a3bbf9e90716`\r\n\r\n  useEffect(() => {\r\n    document.body.style.backgroundImage = 'url(https://image.tmdb.org/t/p/original/rAiYTfKGqDCRIIqo664sY9XZIvQ.jpg)'\r\n      // 'url(https://wallpaperaccess.com/full/670449.jpg)'\r\n    async function fetchMovieFromApi () {\r\n      const res = await axios.get(movieUrl)\r\n      setMovieData(res.data)\r\n    }\r\n    fetchMovieFromApi()\r\n  }, [movieID])\r\n  // ==== END Fetch movie page ====\r\n\r\n\r\n\r\n  // ==== Search state and functions ====\r\n  const [queryData, setQueryData] = useState([])\r\n  const [sliceNumber, setSliceNumber] = useState(5) //how many results are displayed on quick search\r\n  const [oldText, setOldText] = useState(null)\r\n  const [cursor, setCursor] = useState(0)\r\n\r\n  const handleChange = e => {\r\n    const value = e.target.value.replace(/[^\\w\\s]/gi, '')\r\n    setSearchbarText(value)\r\n    if (value.length === 0) {\r\n      setOldText('')\r\n    }\r\n    if (value.length >= 1) {\r\n      let url = `https://api.themoviedb.org/3/search/movie?query=%${value}&api_key=cfe422613b250f702980a3bbf9e90716`\r\n      axios.get(url).then(response => {\r\n        const res = response.data.results\r\n        console.log(res)\r\n        let movies = res\r\n          .map(a => [\r\n            a.original_title,\r\n            a.id,\r\n            `https://image.tmdb.org/t/p/w500${a.poster_path}`,\r\n            // a.overview.substring(0, 150).concat('...'),\r\n            // a.release_date\r\n          ])\r\n          .slice(0, sliceNumber)\r\n        console.log(movies)\r\n        setSuggestions(movies)\r\n        setQueryData(response.data.results)\r\n        setOldText(value)\r\n      })\r\n    } else {\r\n      setCursor(-1)\r\n      setTimeout(() => {\r\n        // okno sugesti z op�nieniem ga�nie\r\n        setSuggestions([])\r\n      }, 500)\r\n    }\r\n  }\r\n\r\n  const handleClickOnInput = e => {\r\n    if (searchbarText === '') {\r\n      setSearchbarText(oldText)\r\n      setOldText('')\r\n    }\r\n  }\r\n  // ==== END Search state and functions ====\r\n\r\n\r\n  // === Check if input changed ===\r\n  const [change, setChange] = useState(0)\r\n  /*\r\n  let timer = null\r\n  const handleCheck = () => {\r\n    // Clears running timer and starts a new one each time the user types\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      toggleCheck();\r\n    }, 1000);\r\n  }\r\n\r\n  const toggleCheck = () => {\r\n    setStartPageSuggestions(suggestions)\r\n    setChange(() => change + 1)\r\n    console.log(change)\r\n  }\r\n\r\n  if(text !== oldText){\r\n    handleCheck()\r\n  } \r\n  */\r\n// === END Check if input changed ===\r\n\r\nuseEffect(() => {\r\n  console.log('suggenstions: ' + suggestions)\r\n}, [suggestions])\r\n\r\nconst routes = [\r\n  { path: '/', name: 'StartPage', Component: StartPage },\r\n  { path: `/movie/:movieID`, name: 'Movie', Component: Movie }\r\n]\r\n\r\n  return (\r\n    <div\r\n      className='container-fluid w-95 h-95'\r\n      id='app'\r\n      {...ArrowKeysReact.events}\r\n      tabIndex='1'\r\n      style={{ outline: 0 }}\r\n    >\r\n      <div className='row'>\r\n        <div className='col-12 col-lg-10 offset-lg-1 myContainer'>\r\n          {routes.map(({ path, Component }) => (\r\n              <Route key={path} exact path={path}>\r\n                {({ match }) => (\r\n                  <CSSTransition\r\n                    in={match != null}\r\n                    timeout={2000}\r\n                    classNames=\"Swich\"\r\n                    unmountOnExit\r\n                  >\r\n                    <div className=\"page\">\r\n                      <Component {...{movieID, text: searchbarText, setText: setSearchbarText, oldText, setOldText, cursor, setCursor, sliceNumber, setSliceNumber, suggestions, setSuggestions, handleChange, handleClickOnInput, queryData, setMovieID, data: movieData, fetchStartPage, handleChange, handleClickOnInput, suggestions, setMovieID, change, startPageSuggestions}}/>\r\n                    </div>\r\n                  </CSSTransition>\r\n                )}\r\n              </Route>\r\n            ))}\r\n\r\n          {/* <Switch>\r\n            <Route exact path='/' render={() => \r\n              <StartPage {...{text, oldText, handleChange, handleClickOnInput, suggestions, setMovieID, change, startPageSuggestions}} />} />\r\n\r\n            <Route exact path={`/movie/:${movieID}`} render={routeProps => \r\n              <Movie {...{routeProps, text, setText, oldText, setOldText, cursor, setCursor, sliceNumber, setSliceNumber, suggestions, setSuggestions, handleChange, handleClickOnInput, queryData, setMovieID, data, fetchStartPage}} />} />\r\n\r\n          </Switch> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\A_Programowanie\\My-Movie-Search\\src\\serviceWorker.js",[],"C:\\A_Programowanie\\My-Movie-Search\\src\\Movie.js",["60"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport MovieSearch from './MovieSearch'\r\nimport MovieCard from './MovieCard'\r\nimport axios from 'axios'\r\n\r\n\r\nexport default function Movie(props) {\r\n  const {movieID, text, setText, oldText, setOldText, cursor, setCursor, sliceNumber, setSliceNumber, suggestions, setSuggestions, handleChange, handleClickOnInput, queryData, setMovieID, data,fetchStartPage } = props\r\n  // const movieID = parseInt(routeProps)\r\n\r\n\r\n  const suggestionsSelected = value => {\r\n    if (text && value !== undefined) {\r\n      setOldText(text)\r\n      setText('')\r\n      setMovieID(value[1])\r\n    }\r\n  }\r\n\r\n// ==== sugeston hide on click away ====\r\n  const [show, setShow] = useState(false)\r\n  const node = useRef()\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', handleClick)\r\n    return () => {\r\n      // return function to be called when unmounted\r\n      document.removeEventListener('mousedown', handleClick)\r\n    }\r\n  }, [])\r\n\r\n  const handleClick = e => {\r\n    if (node.current.contains(e.target)) {\r\n      // inside click\r\n      setShow(true)\r\n    } else {\r\n      // outside click\r\n      setShow(false)\r\n    }\r\n  }\r\n  // ==== END sugeston hide on clic kaway ====\r\n\r\n  return (\r\n    <div>\r\n      <MovieSearch {...{show, setShow, text, setText, oldText, setOldText, cursor, setCursor, sliceNumber, setSliceNumber, suggestions, setSuggestions, suggestionsSelected, handleChange, handleClickOnInput, node, queryData, fetchStartPage}}/> \r\n\r\n      <MovieCard {...{data, movieID}} />\r\n    </div>\r\n  )\r\n}","C:\\A_Programowanie\\My-Movie-Search\\src\\StartPage.js",[],"C:\\A_Programowanie\\My-Movie-Search\\src\\MovieSearch.js",["61","62","63","64","65"],"import React, {useEffect, useRef, useState} from 'react'\r\nimport TMDBLogo from './images/tmdb.svg'\r\nimport './styles/main.scss'\r\nimport Scroolbar from './Scroolbar/Scroolbar'\r\nimport ArrowKeysReact from 'arrow-keys-react'\r\nimport {Link, useHistory } from 'react-router-dom';\r\n\r\n\r\nexport default function SearchBox (props) {\r\n  const {show, setShow, setText, setOldText, cursor, setCursor, text, suggestions, setSuggestions, queryData, sliceNumber, setSliceNumber, oldText, node, handleChange, handleClickOnInput, suggestionsSelected, fetchStartPage} = props\r\n\r\n\r\n    // ==== Search arrow up and down logic ====\r\n    \r\n    ArrowKeysReact.config({\r\n      up: () => {\r\n        isNaN(cursor)\r\n          ? setCursor(sliceNumber)\r\n          : cursor < 0\r\n          ? setCursor(sliceNumber)\r\n          : setCursor(prevState => prevState - 1)\r\n      },\r\n      down: () => {\r\n        isNaN(cursor)\r\n          ? setCursor(0)\r\n          : cursor > sliceNumber\r\n          ? setCursor(0)\r\n          : setCursor(prevState => prevState + 1)\r\n      }\r\n    })\r\n  \r\n    useEffect(() => {\r\n      console.log(cursor)\r\n    }, [cursor])\r\n  \r\n    const enterPressed = e => {\r\n      var code = e.keyCode || e.which\r\n      if (code === 13) {\r\n        // enter key\r\n        // zmienna kursor kt�ra �ledzi kt�ry li jest pod�wietlony daje nam indeks za pomoc� kt�rego mo�emy uzyska� id filmu z oryginalnej tablicy\r\n        // dodanie pojawienie paska po wcisnieciu enter\r\n        if (show) {\r\n          if (cursor === sliceNumber) {\r\n            showMore()\r\n          } else {\r\n            suggestionsSelected(suggestions[cursor])\r\n            setShow(false)\r\n            setText(oldText)\r\n          }\r\n        } else {\r\n          if (cursor === sliceNumber) {\r\n            showMore()\r\n          } else {\r\n            setText(oldText)\r\n            setOldText('')\r\n          }\r\n          setShow(true)\r\n          console.log(show)\r\n        }\r\n      }\r\n    } // ==== END Search arrow up and down logic ====\r\n\r\n  // *** show more button ***\r\n  const history = useHistory()\r\n\r\n  const showMore = e => {\r\n    if (sliceNumber >= 10){\r\n      history.push(\"/\")\r\n      setSliceNumber(20)  // moze jakos inaczej to rozwiaza�\r\n    } else {\r\n      if(suggestions.length > 0){\r\n        setSliceNumber(sliceNumber + 5)\r\n        console.log()\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(sliceNumber)\r\n    let movies = queryData\r\n      .map(a => [\r\n        a.original_title,\r\n        a.id,\r\n        `https://image.tmdb.org/t/p/w500${a.poster_path}`\r\n      ])\r\n      .slice(0, sliceNumber)\r\n    console.log(movies)\r\n    setSuggestions(movies)\r\n  }, [sliceNumber])\r\n  // END show more button\r\n\r\n// ==== Pod�wietlenie tekstu ====\r\nfunction getHighlightedText(text, highlight, index) {\r\n  const parts = text.split(new RegExp(`(${highlight})`, 'gi'));\r\n  return <span> { parts.map((part, i) => \r\n    <span \r\n      key={i} \r\n      style=\r\n      {(part.toLowerCase() === highlight.toLowerCase() && props.cursor !== index)\r\n        ? { color: '#00FC87', fontWeight: 'bold' } \r\n        : part.toLowerCase() === highlight.toLowerCase() \r\n          ? { fontWeight: 'bold'}\r\n          : {}} \r\n    >\r\n        { part }\r\n    </span>)\r\n  } </span>;\r\n}\r\n\r\nconst onMouseEnterHandle = e => {\r\n  setCursor(parseInt(e.target.getAttribute('index')))\r\n}\r\n// ==== END Pod�wietlenie tekstu ====\r\n\r\n\r\n  // == console log stuff ==\r\nuseEffect(() => {\r\n  console.log('queryData.length: ' + queryData.length)\r\n  console.log('suggestions.length: ' + suggestions.length)\r\n  console.log('sliceNumber: ' + sliceNumber)\r\n}, [queryData, sliceNumber])\r\n  // == END console log stuff ==\r\n\r\n\r\nconst renderSugestions = () => {\r\n  if (queryData.length > 0) {\r\n    return (\r\n      <Scroolbar show={show} text={text}>\r\n      <ul \r\n        className={(show && text) ? 'animate list' : 'list'} >\r\n      {suggestions.map((item, index) => \r\n      <Link to={`/movie/${item[1]}`} className='linkStyle'>\r\n        <li \r\n          className={cursor === index ? 'active tt-suggestion' : 'tt-suggestion'}\r\n          onClick={()=> suggestionsSelected(item)}\r\n          onMouseEnter={onMouseEnterHandle} \r\n          index={index}\r\n          key={index}\r\n        >\r\n          <div className='row'>\r\n            <img src={item[2]} className='col-lg-2 col-md-3 col-sm-4 col-3 Image'/>\r\n            <p className='col-lg-10 col-md-9 col-sm-8 col-9 textSugestion sugest'>\r\n              {getHighlightedText(item[0], text, index)}\r\n            </p>\r\n          </div>\r\n        </li>\r\n      </Link>)}\r\n        \r\n        <li style={{visibility: queryData.length > suggestions.length ? \"visible\": \"collapse\"}}>\r\n          <p \r\n            onClick={showMore} \r\n            index={sliceNumber}\r\n            className={cursor === sliceNumber \r\n            ? 'active textSugestion showMore tt-suggestion' \r\n            : 'textSugestion showMore tt-suggestion'}\r\n            >\r\n              { sliceNumber >= 10 ? 'full screen search' \r\n              : suggestions.length > 0 ? 'show more' \r\n              : 'no result'}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n      </Scroolbar>\r\n    )\r\n  } else {\r\n    if (text) {\r\n      return (\r\n        <ul className='animate list showMore noResult'>\r\n          <li>no result</li>\r\n        </ul>\r\n        )\r\n      } \r\n  }\r\n}\r\n\r\n  return (\r\n    <div className='col-xs-12 search-container nopadding'>\r\n      <div className='row'>\r\n        <div className='col-xs-12 col-sm-3 col-lg-3'>\r\n        <Link to='/'>\r\n          <img src={TMDBLogo} className='logo' alt='The Movie Database' onClick={fetchStartPage}/>\r\n        </Link>\r\n        </div>\r\n        <div className='col-xs-12 col-sm-9 col-lg-9 searchInside' ref={node}>\r\n          <form className='searchbox' onSubmit={e => { e.preventDefault()}}>\r\n            <input\r\n              onChange={handleChange}\r\n              className='myform'\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={text !== '' ? text : oldText}\r\n              onKeyPress={enterPressed}\r\n              onClick={handleClickOnInput}\r\n            />\r\n          </form>\r\n          {renderSugestions()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\A_Programowanie\\My-Movie-Search\\src\\MovieCard.js",["66","67","68","69"],"import React, {useEffect, useState, useRef} from 'react'\r\nimport './styles/main.scss'\r\nimport numeral from 'numeral'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\n\r\nfunction nestedDataToString (nestedData) {\r\n  let nestedArray = [],\r\n    resultString\r\n  if (nestedData !== undefined) {\r\n    nestedData.forEach(function (item) {\r\n      nestedArray.push(item.name)\r\n    })\r\n  }\r\n  resultString = nestedArray.join(', ') // array to string\r\n  return resultString\r\n}\r\n\r\nexport default function Card(props) {\r\nlet {data, movieID} = props\r\n\r\nlet posterIMG = 'https://image.tmdb.org/t/p/w500' + data.poster_path,\r\n    production = data.production_companies,\r\n    genres = data.genres,\r\n    totalRevenue = data.revenue,\r\n    productionList = nestedDataToString(production),\r\n    noData = '-',\r\n    genresList = nestedDataToString(genres),\r\n    backdropIMG = 'https://image.tmdb.org/t/p/original' + data.backdrop_path\r\n\r\n// conditional statements for no data\r\nif (data.vote_average === 'undefined' || data.vote_average === 0) {\r\n  data.vote_average = noData\r\n}\r\n\r\n// dodaje $ i przecinki\r\nif (totalRevenue === 'undefined' || totalRevenue === 0) {\r\n  totalRevenue = noData\r\n} else {\r\n  totalRevenue = numeral(data.revenue).format('($0,0)')\r\n}\r\n\r\nif (data.poster_path == null) {\r\n  posterIMG = require('./images/no_image.png')\r\n    // 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSols5HZxlQWyS9JY5d3_L9imbk0LiziHiyDtMZLHt_UNzoYUXs2g'\r\n}\r\n\r\nif (data.backdrop_path == null) {\r\n  backdropIMG = 'https://wallpaperaccess.com/full/670449.jpg'\r\n}\r\n\r\nuseEffect(() => {\r\n  document.body.style.backgroundImage = 'url(' + backdropIMG + ')'\r\n})\r\n\r\n  return (\r\n    <TransitionGroup className='TransitionGroup'>\r\n    <CSSTransition \r\n      key={props.data}\r\n      timeout={2000}\r\n      classNames='fadeMovieCard'\r\n      >\r\n    <div className='col-12 cardcont nopadding row'>\r\n\r\n      <div className='meta-data-container col-12 col-md-7 col-lg-8'>\r\n        <h1>{data.original_title}</h1>\r\n        <span className=\"tagline\">{data.tagline}</span>\r\n        <p>{data.overview}</p>\r\n        <div className=\"additional-details\">\r\n          <span className=\"genre-list\">{genresList}</span>\r\n          <span className=\"production-list\">{productionList}</span>\r\n          <div className=\"row nopadding release-details\">\r\n            <div className=\"col-6\"> Original Release: <span className=\"meta-data\">{data.release_date}</span></div>\r\n            <div className=\"col-6\"> Running Time: <span className=\"meta-data\">{data.runtime} min</span> </div>\r\n            <div className=\"col-6\"> Box Office: <span className=\"meta-data\">{totalRevenue}</span></div>\r\n            <div className=\"col-6\"> Vote Average: <span className=\"meta-data\">{data.vote_average}</span></div>\r\n          </div>\r\n        </div> \r\n      </div>\r\n\r\n      <div className=\"poster-container nopadding order-md-first col-12 col-md-5 col-lg-4\">\r\n        <img id=\"postertest\" className='poster' src={posterIMG}/>\r\n      </div>\r\n    </div>\r\n  </CSSTransition>\r\n  </TransitionGroup>\r\n  )\r\n}\r\n","C:\\A_Programowanie\\My-Movie-Search\\src\\StartPageSearch.js",["70","71"],"import React, {useEffect, useRef, useState} from 'react'\r\nimport './styles/main.scss'\r\nimport { useScrollPosition } from '@n8tb1t/use-scroll-position'\r\n\r\n\r\nexport default function StartPageSearch(props) {\r\n  const {text, oldText, handleChange, handleClickOnInput} = props\r\n\r\n  const [changeStyle, setChangeStyle] = useState(false)\r\n  useScrollPosition(({ prevPos, currPos }) => {\r\n    (currPos.y < -20) ? setChangeStyle(true) : setChangeStyle(false)\r\n    console.log(changeStyle, currPos.y)\r\n  })\r\n\r\n  return (\r\n    <div className={'col-lg-6 col-md-8 col-sm-9 col-12 st-search ' + (changeStyle ? 'st-animation' : '')}>\r\n      <div className='row'>\r\n        <div className='col-12' >\r\n          <form onSubmit={e => { e.preventDefault()}}>\r\n            <input\r\n              onChange={handleChange}\r\n              className={'myForm1 ' + (changeStyle ? 'myForm-animation' : '')}\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={text !== '' ? text : oldText}\r\n              onClick={handleClickOnInput}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","C:\\A_Programowanie\\My-Movie-Search\\src\\StartPageCard.js",["72","73","74","75","76","77","78","79"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport './styles/main.scss'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport {Route, Link} from 'react-router-dom'\r\n\r\nexport default function FullscreenSearch(props) {\r\n  let {suggestions, suggestionsSelectedFullscreen, text, oldText, change, startPageSuggestions} = props\r\n\r\n  return (\r\n    <TransitionGroup className='TransitionGroup'>\r\n    <CSSTransition \r\n      // key={suggestions}\r\n      timeout={1500}\r\n      classNames='fadeStartPage'\r\n    >\r\n    <div>\r\n      <p className='Popular'>{text === '' || text === null ? 'Trending Now' : ''}</p>\r\n      <div className='row startPage'>\r\n        {suggestions.map((item, index) => \r\n          <div className='cardContainer col-xl-2 col-md-3 col-4'>\r\n            <Link to={`/movie/${item[1]}`} className='linkStyle'>\r\n              <div className='cardFS' onClick={() => suggestionsSelectedFullscreen(item)}>\r\n                <img className='posterImage' src={item[2] !== 'https://image.tmdb.org/t/p/w500null' ? item[2] : require('./images/no_image.png')}/>\r\n                <h1 className='FS-title'>{item[0]}</h1>\r\n              </div>\r\n            </Link>\r\n        </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  </CSSTransition>\r\n  </TransitionGroup>\r\n  )\r\n}","C:\\A_Programowanie\\My-Movie-Search\\src\\Scroolbar\\Scroolbar.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":8,"column":25,"nodeType":"86","messageId":"87","endLine":8,"endColumn":40},{"ruleId":"84","severity":1,"message":"88","line":13,"column":32,"nodeType":"86","messageId":"87","endLine":13,"endColumn":55},{"ruleId":"89","severity":1,"message":"90","line":32,"column":6,"nodeType":"91","endLine":32,"endColumn":8,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":55,"column":6,"nodeType":"91","endLine":55,"endColumn":15,"suggestions":"94"},{"ruleId":"84","severity":1,"message":"95","line":110,"column":18,"nodeType":"86","messageId":"87","endLine":110,"endColumn":27},{"ruleId":"96","severity":1,"message":"97","line":162,"column":284,"nodeType":"98","messageId":"99","endLine":162,"endColumn":296},{"ruleId":"96","severity":1,"message":"100","line":162,"column":298,"nodeType":"98","messageId":"99","endLine":162,"endColumn":316},{"ruleId":"96","severity":1,"message":"101","line":162,"column":318,"nodeType":"98","messageId":"99","endLine":162,"endColumn":329},{"ruleId":"96","severity":1,"message":"102","line":162,"column":331,"nodeType":"98","messageId":"99","endLine":162,"endColumn":341},{"ruleId":"84","severity":1,"message":"103","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":13},{"ruleId":"84","severity":1,"message":"104","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":33},{"ruleId":"84","severity":1,"message":"105","line":1,"column":35,"nodeType":"86","messageId":"87","endLine":1,"endColumn":43},{"ruleId":"89","severity":1,"message":"106","line":89,"column":6,"nodeType":"91","endLine":89,"endColumn":19,"suggestions":"107"},{"ruleId":"89","severity":1,"message":"108","line":121,"column":4,"nodeType":"91","endLine":121,"endColumn":28,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":141,"column":13,"nodeType":"112","endLine":141,"endColumn":84},{"ruleId":"84","severity":1,"message":"105","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":35},{"ruleId":"84","severity":1,"message":"104","line":1,"column":37,"nodeType":"86","messageId":"87","endLine":1,"endColumn":43},{"ruleId":"84","severity":1,"message":"113","line":19,"column":12,"nodeType":"86","messageId":"87","endLine":19,"endColumn":19},{"ruleId":"110","severity":1,"message":"111","line":81,"column":9,"nodeType":"112","endLine":81,"endColumn":66},{"ruleId":"84","severity":1,"message":"114","line":1,"column":16,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"104","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":33},{"ruleId":"84","severity":1,"message":"105","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"114","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"104","line":1,"column":38,"nodeType":"86","messageId":"87","endLine":1,"endColumn":44},{"ruleId":"84","severity":1,"message":"115","line":4,"column":9,"nodeType":"86","messageId":"87","endLine":4,"endColumn":14},{"ruleId":"84","severity":1,"message":"116","line":7,"column":58,"nodeType":"86","messageId":"87","endLine":7,"endColumn":65},{"ruleId":"84","severity":1,"message":"117","line":7,"column":67,"nodeType":"86","messageId":"87","endLine":7,"endColumn":73},{"ruleId":"84","severity":1,"message":"118","line":7,"column":75,"nodeType":"86","messageId":"87","endLine":7,"endColumn":95},{"ruleId":"110","severity":1,"message":"111","line":23,"column":17,"nodeType":"112","endLine":23,"endColumn":148},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","'setStartPageSuggestions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchStartPage'. Either include it or remove the dependency array.","ArrayExpression",["121"],"React Hook useEffect has a missing dependency: 'movieUrl'. Either include it or remove the dependency array.",["122"],"'setChange' is assigned a value but never used.","no-dupe-keys","Duplicate key 'handleChange'.","ObjectExpression","unexpected","Duplicate key 'handleClickOnInput'.","Duplicate key 'suggestions'.","Duplicate key 'setMovieID'.","'axios' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'queryData' and 'setSuggestions'. Either include them or remove the dependency array.",["123"],"React Hook useEffect has a missing dependency: 'suggestions.length'. Either include it or remove the dependency array.",["124"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'movieID' is assigned a value but never used.","'useEffect' is defined but never used.","'Route' is defined but never used.","'oldText' is assigned a value but never used.","'change' is assigned a value but never used.","'startPageSuggestions' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [fetchStartPage]",{"range":"133","text":"134"},"Update the dependencies array to be: [movieID, movieUrl]",{"range":"135","text":"136"},"Update the dependencies array to be: [queryData, setSuggestions, sliceNumber]",{"range":"137","text":"138"},"Update the dependencies array to be: [queryData, sliceNumber, suggestions.length]",{"range":"139","text":"140"},[1109,1111],"[fetchStartPage]",[1961,1970],"[movieID, movieUrl]",[2621,2634],"[queryData, setSuggestions, sliceNumber]",[3562,3586],"[queryData, sliceNumber, suggestions.length]"]